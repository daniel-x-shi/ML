{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4JyMa7rU0WLf"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import math\n","import time\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.decomposition import PCA\n","from sklearn.tree import DecisionTreeClassifier, plot_tree\n","from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.cluster import KMeans\n","\n","from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n","from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HnmX8Zlgwk5Y"},"outputs":[],"source":["abc = AdaBoostClassifier(n_estimators=100, learning_rate=1, random_state=10) #learning_rate\n","abc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#print(classification_report(y_train, y_pred_abc))\n","\n","y_pred_=abc.predict(X_train)\n","abc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","\n","y_pred=abc.predict(X_test)\n","abc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":662009,"status":"ok","timestamp":1746067541358,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_QS_Ns_9JoF-","outputId":"36c85c1f-0f2a-49c6-beab-d20c304cf43b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.8601044226044227\n","Test accuracy: 0.8616792580308335\n"]}],"source":["abc = AdaBoostClassifier(n_estimators=1000, learning_rate=1, random_state=10) #learning_rate\n","abc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#print(classification_report(y_train, y_pred_abc))\n","\n","y_pred_=abc.predict(X_train)\n","abc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","\n","y_pred=abc.predict(X_test)\n","abc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":69775,"status":"ok","timestamp":1746068572055,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"cVS-xVh0yqcK","outputId":"887aa619-3ee1-4cb8-c056-2fae59cfd4b0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.8558660933660933\n","Test accuracy: 0.8564584484982495\n"]}],"source":["abc = AdaBoostClassifier(n_estimators=100, learning_rate=1, random_state=10) #learning_rate\n","abc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#print(classification_report(y_train, y_pred_abc))\n","\n","y_pred_=abc.predict(X_train)\n","abc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","\n","y_pred=abc.predict(X_test)\n","abc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":161225,"status":"ok","timestamp":1746068904802,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"ubDgL0efyyyg","outputId":"23491d8c-0d66-4e54-c053-c8bb8d88d036"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.8565724815724816\n","Test accuracy: 0.8583625084454272\n"]}],"source":["abc = AdaBoostClassifier(n_estimators=250, learning_rate=0.8, random_state=10) #learning_rate\n","abc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#print(classification_report(y_train, y_pred_abc))\n","\n","y_pred_=abc.predict(X_train)\n","abc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","\n","y_pred=abc.predict(X_test)\n","abc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":585154,"status":"ok","timestamp":1746070770694,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"l-Id1-Wc05d7","outputId":"821130ca-f88e-4901-854d-84e3bd86d18c"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["train_err=[]\n","test_err=[]\n","n_est_vals=[50,100,250,500]\n","for i in n_est_vals:\n","  abc = AdaBoostClassifier(n_estimators=i, learning_rate=1, random_state=10) #learning_rate\n","  abc.fit(X_train, y_train)\n","\n","  # Predict the response for test dataset\n","  #print(classification_report(y_train, y_pred_abc))\n","\n","  y_pred_=abc.predict(X_train)\n","  abc_mat_test=confusion_matrix(y_train,y_pred_)\n","  #print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","  train_err.append(abc_mat_test.diagonal().sum()/abc_mat_test.sum())\n","\n","  y_pred=abc.predict(X_test)\n","  abc_mat=confusion_matrix(y_test,y_pred)\n","  #print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')\n","  test_err.append(abc_mat.diagonal().sum()/abc_mat.sum())\n","plt.title('Errors for number of estimators')\n","plt.plot(n_est_vals,train_err,label='train')\n","plt.plot(n_est_vals,test_err,label='test')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":322517,"status":"ok","timestamp":1746071123008,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"bEuxLICE1oIU","outputId":"5e0327ae-099e-4606-8eb7-e549a7f212e1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["train_err=[]\n","test_err=[]\n","rate_vals=[0.1,0.5,1,5,10]\n","for i in rate_vals:\n","  abc = AdaBoostClassifier(n_estimators=100, learning_rate=i, random_state=10) #learning_rate\n","  abc.fit(X_train, y_train)\n","\n","  # Predict the response for test dataset\n","  #print(classification_report(y_train, y_pred_abc))\n","\n","  y_pred_=abc.predict(X_train)\n","  abc_mat_test=confusion_matrix(y_train,y_pred_)\n","  #print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","  train_err.append(abc_mat_test.diagonal().sum()/abc_mat_test.sum())\n","\n","  y_pred=abc.predict(X_test)\n","  abc_mat=confusion_matrix(y_test,y_pred)\n","  #print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')\n","  test_err.append(abc_mat.diagonal().sum()/abc_mat.sum())\n","plt.title('Errors for learning rates')\n","plt.plot(rate_vals,train_err,label='train')\n","plt.plot(rate_vals,test_err,label='test')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":86931,"status":"ok","timestamp":1746066862151,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"JVgpaB9CJoD8","outputId":"86bd2680-901c-49ab-e414-487dbdc52401"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.9293918918918919\n","Test accuracy: 0.8544315459738345\n"]}],"source":["gbc = GradientBoostingClassifier(n_estimators=1000, learning_rate=1, random_state=10) #learning_rate, n_iter_no_change, ccp_alpha?\n","gbc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#y_pred_gbc = gbc.predict(X_validate)\n","#print(classification_report(y_test, y_pred_gbc))\n","\n","y_pred_=gbc.predict(X_train)\n","gbc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {gbc_mat_test.diagonal().sum()/gbc_mat_test.sum()}')\n","\n","y_pred=gbc.predict(X_test)\n","gbc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gbc_mat.diagonal().sum()/gbc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9355,"status":"ok","timestamp":1746067606587,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"NLrceb_Fs-AY","outputId":"b15e9080-041a-4dd5-dce6-8a2a8a8f36ea"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.8915540540540541\n","Test accuracy: 0.8683741784902648\n"]}],"source":["gbc = GradientBoostingClassifier(n_estimators=100, learning_rate=1, random_state=10) #learning_rate, n_iter_no_change, ccp_alpha?\n","gbc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#y_pred_gbc = gbc.predict(X_validate)\n","#print(classification_report(y_test, y_pred_gbc))\n","\n","y_pred_=gbc.predict(X_train)\n","gbc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {gbc_mat_test.diagonal().sum()/gbc_mat_test.sum()}')\n","\n","y_pred=gbc.predict(X_test)\n","gbc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gbc_mat.diagonal().sum()/gbc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":416716,"status":"ok","timestamp":1746068026969,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"r73H5RYbskJy","outputId":"7b1ca223-9914-47e1-fa67-c41b7c254ef5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.9293918918918919\n","Test accuracy: 0.8544315459738345\n"]}],"source":["gbc = GradientBoostingClassifier(n_estimators=5000, learning_rate=1, random_state=10) #learning_rate, n_iter_no_change, ccp_alpha?\n","gbc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#y_pred_gbc = gbc.predict(X_validate)\n","#print(classification_report(y_test, y_pred_gbc))\n","\n","y_pred_=gbc.predict(X_train)\n","gbc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {gbc_mat_test.diagonal().sum()/gbc_mat_test.sum()}')\n","\n","y_pred=gbc.predict(X_test)\n","gbc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gbc_mat.diagonal().sum()/gbc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":87669,"status":"ok","timestamp":1746068441557,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"AwFYMaLCJoBk","outputId":"b108c36b-714d-4858-fbf7-0a5fb29ba92e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.9419226044226044\n","Test accuracy: 0.8605122535470794\n"]}],"source":["gbc = GradientBoostingClassifier(n_estimators=1000, learning_rate=0.5, random_state=10) #learning_rate, n_iter_no_change, ccp_alpha?\n","gbc.fit(X_train, y_train)\n","\n","# Predict the response for test dataset\n","#y_pred_gbc = gbc.predict(X_validate)\n","#print(classification_report(y_test, y_pred_gbc))\n","\n","y_pred_=gbc.predict(X_train)\n","gbc_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {gbc_mat_test.diagonal().sum()/gbc_mat_test.sum()}')\n","\n","y_pred=gbc.predict(X_test)\n","gbc_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gbc_mat.diagonal().sum()/gbc_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"44OOHzPuJn_e"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tESXfnFcJn9Y"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PkiU_QibJn7S"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zFhzpYFpJn5M"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mPO_YvOiJn3Y"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ue8zkv_2AJfV"},"outputs":[],"source":["pd.set_option('display.max_columns', None)\n","pd.set_option('display.max_rows', False)#False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":39,"status":"ok","timestamp":1746486363023,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"3W1yVfue_8dT","outputId":"0d353a69-5074-4861-ea5f-a312b1cbc8ca"},"outputs":[{"data":{"text/plain":["{'workclass': ['Private',\n","  'Self-emp-not-inc',\n","  'Self-emp-inc',\n","  'Federal-gov',\n","  'Local-gov',\n","  'State-gov',\n","  'Without-pay',\n","  'Never-worked'],\n"," 'education': ['Bachelors',\n","  'Some-college',\n","  '11th',\n","  'HS-grad',\n","  'Prof-school',\n","  'Assoc-acdm',\n","  'Assoc-voc',\n","  '9th',\n","  '7th-8th',\n","  '12th',\n","  'Masters',\n","  '1st-4th',\n","  '10th',\n","  'Doctorate',\n","  '5th-6th',\n","  'Preschool'],\n"," 'marital-status': ['Married-civ-spouse',\n","  'Divorced',\n","  'Never-married',\n","  'Separated',\n","  'Widowed',\n","  'Married-spouse-absent',\n","  'Married-AF-spouse'],\n"," 'occupation': ['Tech-support',\n","  'Craft-repair',\n","  'Other-service',\n","  'Sales',\n","  'Exec-managerial',\n","  'Prof-specialty',\n","  'Handlers-cleaners',\n","  'Machine-op-inspct',\n","  'Adm-clerical',\n","  'Farming-fishing',\n","  'Transport-moving',\n","  'Priv-house-serv',\n","  'Protective-serv',\n","  'Armed-Forces'],\n"," 'relationship': ['Wife',\n","  'Own-child',\n","  'Husband',\n","  'Not-in-family',\n","  'Other-relative',\n","  'Unmarried'],\n"," 'race': ['White',\n","  'Asian-Pac-Islander',\n","  'Amer-Indian-Eskimo',\n","  'Other',\n","  'Black'],\n"," 'native-country': ['United-States',\n","  'Cambodia',\n","  'England',\n","  'Puerto-Rico',\n","  'Canada',\n","  'Germany',\n","  'Outlying-US(Guam-USVI-etc)',\n","  'India',\n","  'Japan',\n","  'Greece',\n","  'South',\n","  'China',\n","  'Cuba',\n","  'Iran',\n","  'Honduras',\n","  'Philippines',\n","  'Italy',\n","  'Poland',\n","  'Jamaica',\n","  'Vietnam',\n","  'Mexico',\n","  'Portugal',\n","  'Ireland',\n","  'France',\n","  'Dominican-Republic',\n","  'Laos',\n","  'Ecuador',\n","  'Taiwan',\n","  'Haiti',\n","  'Columbia',\n","  'Hungary',\n","  'Guatemala',\n","  'Nicaragua',\n","  'Scotland',\n","  'Thailand',\n","  'Yugoslavia',\n","  'El-Salvador',\n","  'Trinadad&Tobago',\n","  'Peru',\n","  'Hong',\n","  'Holand-Netherlands']}"]},"execution_count":98,"metadata":{},"output_type":"execute_result"}],"source":["#import columns\n","test_names=pd.read_table('adult.names',header=0)\n","test_names_df=test_names.iloc[92:]\n","names_=[test_names_df.iloc[i,0].strip('.') for i in range(test_names_df.shape[0])]\n","names=[test_names_df.iloc[i,0].split(':')[0] for i in range(test_names_df.shape[0])]\n","val_list=dict()\n","for i in names_:\n","  feature=i.split(': ')[0]\n","  if feature in ['age','fnlwgt','education-num','capital-gain','sex','capital-loss','hours-per-week']:\n","    continue\n","  vals=i.split(': ')[1].split(', ')\n","  val_list[feature]=vals\n","val_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"executionInfo":{"elapsed":1589,"status":"ok","timestamp":1746486371215,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_MwjQ26J9pGB","outputId":"ef03db11-afc9-4016-e2ba-25e5e1359da9"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df_test\",\n  \"rows\": 16281,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"18\",\n          \"74\",\n          \"40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workclass\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Without-pay\",\n          \"Local-gov\",\n          \"State-gov\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fnlwgt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12787,\n        \"samples\": [\n          \"98035\",\n          \"155632\",\n          \"34173\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"11th\",\n          \"HS-grad\",\n          \"Prof-school\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education-num\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"7\",\n          \"9\",\n          \"15\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"marital-status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Never-married\",\n          \"Married-civ-spouse\",\n          \"Married-spouse-absent\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Tech-support\",\n          \"Priv-house-serv\",\n          \"Machine-op-inspct\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relationship\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Own-child\",\n          \"Husband\",\n          \"Other-relative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"White\",\n          \"Amer-Indian-Eskimo\",\n          \"Asian-Pac-Islander\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-gain\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 113,\n        \"samples\": [\n          \"34095\",\n          \"7298\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-loss\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 82,\n        \"samples\": [\n          \"1258\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hours-per-week\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 89,\n        \"samples\": [\n          \"17\",\n          \"23\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"native-country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 41,\n        \"samples\": [\n          \"Italy\",\n          \"Vietnam\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_value\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \">50K\",\n          \"<=50K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df_test"},"text/html":["\n","  <div id=\"df-9deea4b4-d67b-4cbd-a807-f7656de2e2c2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>workclass</th>\n","      <th>fnlwgt</th>\n","      <th>education</th>\n","      <th>education-num</th>\n","      <th>marital-status</th>\n","      <th>occupation</th>\n","      <th>relationship</th>\n","      <th>race</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>native-country</th>\n","      <th>pred_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>25</td>\n","      <td>Private</td>\n","      <td>226802</td>\n","      <td>11th</td>\n","      <td>7</td>\n","      <td>Never-married</td>\n","      <td>Machine-op-inspct</td>\n","      <td>Own-child</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38</td>\n","      <td>Private</td>\n","      <td>89814</td>\n","      <td>HS-grad</td>\n","      <td>9</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Farming-fishing</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>Local-gov</td>\n","      <td>336951</td>\n","      <td>Assoc-acdm</td>\n","      <td>12</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Protective-serv</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&gt;50K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44</td>\n","      <td>Private</td>\n","      <td>160323</td>\n","      <td>Some-college</td>\n","      <td>10</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Machine-op-inspct</td>\n","      <td>Husband</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>7688</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&gt;50K</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>18</td>\n","      <td>?</td>\n","      <td>103497</td>\n","      <td>Some-college</td>\n","      <td>10</td>\n","      <td>Never-married</td>\n","      <td>?</td>\n","      <td>Own-child</td>\n","      <td>White</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9deea4b4-d67b-4cbd-a807-f7656de2e2c2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9deea4b4-d67b-4cbd-a807-f7656de2e2c2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9deea4b4-d67b-4cbd-a807-f7656de2e2c2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-62a9a403-1abb-4998-aac6-bf3426eb9d8f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62a9a403-1abb-4998-aac6-bf3426eb9d8f')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-62a9a403-1abb-4998-aac6-bf3426eb9d8f button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["  age  workclass  fnlwgt     education education-num      marital-status  \\\n","0  25    Private  226802          11th             7       Never-married   \n","1  38    Private   89814       HS-grad             9  Married-civ-spouse   \n","2  28  Local-gov  336951    Assoc-acdm            12  Married-civ-spouse   \n","3  44    Private  160323  Some-college            10  Married-civ-spouse   \n","4  18          ?  103497  Some-college            10       Never-married   \n","\n","          occupation relationship   race     sex capital-gain capital-loss  \\\n","0  Machine-op-inspct    Own-child  Black    Male            0            0   \n","1    Farming-fishing      Husband  White    Male            0            0   \n","2    Protective-serv      Husband  White    Male            0            0   \n","3  Machine-op-inspct      Husband  Black    Male         7688            0   \n","4                  ?    Own-child  White  Female            0            0   \n","\n","  hours-per-week native-country pred_value  \n","0             40  United-States      <=50K  \n","1             50  United-States      <=50K  \n","2             40  United-States       >50K  \n","3             40  United-States       >50K  \n","4             30  United-States      <=50K  "]},"execution_count":99,"metadata":{},"output_type":"execute_result"}],"source":["#import test data\n","test=pd.read_table('adult.test')\n","df_test_=[test.iloc[r,0].strip('.').split(', ') for r in range(test.shape[0])]\n","df_test=pd.DataFrame(df_test_,columns=names+['pred_value'])\n","df_test.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":861,"status":"ok","timestamp":1746486374309,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"GWqYQ1RaCM6t","outputId":"e6c5365e-a762-4f07-d26e-30d8f3b8c8a7"},"outputs":[{"name":"stdout","output_type":"stream","text":["                                                       0\n","0      39, State-gov, 77516, Bachelors, 13, Never-mar...\n","1      50, Self-emp-not-inc, 83311, Bachelors, 13, Ma...\n","2      38, Private, 215646, HS-grad, 9, Divorced, Han...\n","3      53, Private, 234721, 11th, 7, Married-civ-spou...\n","4      28, Private, 338409, Bachelors, 13, Married-ci...\n","...                                                  ...\n","32556  27, Private, 257302, Assoc-acdm, 12, Married-c...\n","32557  40, Private, 154374, HS-grad, 9, Married-civ-s...\n","32558  58, Private, 151910, HS-grad, 9, Widowed, Adm-...\n","32559  22, Private, 201490, HS-grad, 9, Never-married...\n","32560  52, Self-emp-inc, 287927, HS-grad, 9, Married-...\n","\n","[32561 rows x 1 columns]\n","      age         workclass  fnlwgt   education education-num  \\\n","0      39         State-gov   77516   Bachelors            13   \n","1      50  Self-emp-not-inc   83311   Bachelors            13   \n","2      38           Private  215646     HS-grad             9   \n","3      53           Private  234721        11th             7   \n","4      28           Private  338409   Bachelors            13   \n","...    ..               ...     ...         ...           ...   \n","32556  27           Private  257302  Assoc-acdm            12   \n","32557  40           Private  154374     HS-grad             9   \n","32558  58           Private  151910     HS-grad             9   \n","32559  22           Private  201490     HS-grad             9   \n","32560  52      Self-emp-inc  287927     HS-grad             9   \n","\n","           marital-status         occupation   relationship   race     sex  \\\n","0           Never-married       Adm-clerical  Not-in-family  White    Male   \n","1      Married-civ-spouse    Exec-managerial        Husband  White    Male   \n","2                Divorced  Handlers-cleaners  Not-in-family  White    Male   \n","3      Married-civ-spouse  Handlers-cleaners        Husband  Black    Male   \n","4      Married-civ-spouse     Prof-specialty           Wife  Black  Female   \n","...                   ...                ...            ...    ...     ...   \n","32556  Married-civ-spouse       Tech-support           Wife  White  Female   \n","32557  Married-civ-spouse  Machine-op-inspct        Husband  White    Male   \n","32558             Widowed       Adm-clerical      Unmarried  White  Female   \n","32559       Never-married       Adm-clerical      Own-child  White    Male   \n","32560  Married-civ-spouse    Exec-managerial           Wife  White  Female   \n","\n","      capital-gain capital-loss hours-per-week native-country pred_value  \n","0             2174            0             40  United-States      <=50K  \n","1                0            0             13  United-States      <=50K  \n","2                0            0             40  United-States      <=50K  \n","3                0            0             40  United-States      <=50K  \n","4                0            0             40           Cuba      <=50K  \n","...            ...          ...            ...            ...        ...  \n","32556            0            0             38  United-States      <=50K  \n","32557            0            0             40  United-States       >50K  \n","32558            0            0             40  United-States      <=50K  \n","32559            0            0             20  United-States      <=50K  \n","32560        15024            0             40  United-States       >50K  \n","\n","[32561 rows x 15 columns]\n"]}],"source":["#import train data\n","train=pd.read_table('adult.data',header=None)\n","print(train)\n","\n","df_train_=[train.iloc[r,0].split(', ') for r in range(train.shape[0])]\n","df_train=pd.DataFrame(df_train_,columns=names+['pred_value'])\n","print(df_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"executionInfo":{"elapsed":1586,"status":"ok","timestamp":1746486378140,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"pYzVnsZronYH","outputId":"0abd2c31-63a7-458a-9da5-f553890cf0d9"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-101-d993b88c0411>:9: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df_train['sex']=df_train['sex'].replace({'Female':0,'Male':1})\n","<ipython-input-101-d993b88c0411>:10: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df_train['pred_value']=df_train['pred_value'].replace({'<=50K':0,'>50K':1})\n"]},{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train"},"text/html":["\n","  <div id=\"df-d23edde8-a67b-4329-bca6-d0536bd8ca39\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>fnlwgt</th>\n","      <th>education-num</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>pred_value</th>\n","      <th>Private</th>\n","      <th>Self-emp-not-inc</th>\n","      <th>...</th>\n","      <th>Guatemala</th>\n","      <th>Nicaragua</th>\n","      <th>Scotland</th>\n","      <th>Thailand</th>\n","      <th>Yugoslavia</th>\n","      <th>El-Salvador</th>\n","      <th>Trinadad&amp;Tobago</th>\n","      <th>Peru</th>\n","      <th>Hong</th>\n","      <th>Holand-Netherlands</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>77516</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>2174</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>83311</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>215646</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>234721</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>338409</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 105 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d23edde8-a67b-4329-bca6-d0536bd8ca39')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d23edde8-a67b-4329-bca6-d0536bd8ca39 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d23edde8-a67b-4329-bca6-d0536bd8ca39');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c8ff6ea6-3e57-44d8-b30d-43a424db7b21\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8ff6ea6-3e57-44d8-b30d-43a424db7b21')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c8ff6ea6-3e57-44d8-b30d-43a424db7b21 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["  age  fnlwgt education-num  sex capital-gain capital-loss hours-per-week  \\\n","0  39   77516            13    1         2174            0             40   \n","1  50   83311            13    1            0            0             13   \n","2  38  215646             9    1            0            0             40   \n","3  53  234721             7    1            0            0             40   \n","4  28  338409            13    0            0            0             40   \n","\n","   pred_value  Private  Self-emp-not-inc  ...  Guatemala  Nicaragua  Scotland  \\\n","0           0    False             False  ...      False      False     False   \n","1           0    False              True  ...      False      False     False   \n","2           0     True             False  ...      False      False     False   \n","3           0     True             False  ...      False      False     False   \n","4           0     True             False  ...      False      False     False   \n","\n","   Thailand  Yugoslavia  El-Salvador  Trinadad&Tobago   Peru   Hong  \\\n","0     False       False        False            False  False  False   \n","1     False       False        False            False  False  False   \n","2     False       False        False            False  False  False   \n","3     False       False        False            False  False  False   \n","4     False       False        False            False  False  False   \n","\n","   Holand-Netherlands  \n","0               False  \n","1               False  \n","2               False  \n","3               False  \n","4               False  \n","\n","[5 rows x 105 columns]"]},"execution_count":101,"metadata":{},"output_type":"execute_result"}],"source":["#one hot encoding\n","for feature in val_list:\n","  for val in val_list[feature]:\n","      df_train[val]=df_train[feature]==val\n","df_train=df_train.drop(val_list.keys(),axis=1)\n","df_train['fnlwgt']=df_train['fnlwgt'].astype('int')\n","\n","#preprocessing\n","df_train['sex']=df_train['sex'].replace({'Female':0,'Male':1})\n","df_train['pred_value']=df_train['pred_value'].replace({'<=50K':0,'>50K':1})\n","\n","X_train=df_train.drop(['pred_value'],axis=1)\n","y_train=df_train['pred_value']\n","\n","df_train.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"executionInfo":{"elapsed":573,"status":"ok","timestamp":1746486379456,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"kW8Rsjg8D7mc","outputId":"40277149-16f5-4b43-91ac-c4589d0d32f9"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-102-effb35288503>:9: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df_test['sex']=df_test['sex'].replace({'Female':0,'Male':1})\n","<ipython-input-102-effb35288503>:10: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df_test['pred_value']=df_test['pred_value'].replace({'<=50K':0,'>50K':1})\n"]},{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_test"},"text/html":["\n","  <div id=\"df-0a9b446e-8450-4e0c-94f2-da0831b102f6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>fnlwgt</th>\n","      <th>education-num</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>pred_value</th>\n","      <th>Private</th>\n","      <th>Self-emp-not-inc</th>\n","      <th>...</th>\n","      <th>Guatemala</th>\n","      <th>Nicaragua</th>\n","      <th>Scotland</th>\n","      <th>Thailand</th>\n","      <th>Yugoslavia</th>\n","      <th>El-Salvador</th>\n","      <th>Trinadad&amp;Tobago</th>\n","      <th>Peru</th>\n","      <th>Hong</th>\n","      <th>Holand-Netherlands</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>25</td>\n","      <td>226802</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38</td>\n","      <td>89814</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>336951</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44</td>\n","      <td>160323</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>7688</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>18</td>\n","      <td>103497</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 105 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a9b446e-8450-4e0c-94f2-da0831b102f6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0a9b446e-8450-4e0c-94f2-da0831b102f6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0a9b446e-8450-4e0c-94f2-da0831b102f6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-f1004539-9369-4096-83f9-e95be5debd2e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1004539-9369-4096-83f9-e95be5debd2e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-f1004539-9369-4096-83f9-e95be5debd2e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["  age  fnlwgt education-num  sex capital-gain capital-loss hours-per-week  \\\n","0  25  226802             7    1            0            0             40   \n","1  38   89814             9    1            0            0             50   \n","2  28  336951            12    1            0            0             40   \n","3  44  160323            10    1         7688            0             40   \n","4  18  103497            10    0            0            0             30   \n","\n","   pred_value  Private  Self-emp-not-inc  ...  Guatemala  Nicaragua  Scotland  \\\n","0           0     True             False  ...      False      False     False   \n","1           0     True             False  ...      False      False     False   \n","2           1    False             False  ...      False      False     False   \n","3           1     True             False  ...      False      False     False   \n","4           0    False             False  ...      False      False     False   \n","\n","   Thailand  Yugoslavia  El-Salvador  Trinadad&Tobago   Peru   Hong  \\\n","0     False       False        False            False  False  False   \n","1     False       False        False            False  False  False   \n","2     False       False        False            False  False  False   \n","3     False       False        False            False  False  False   \n","4     False       False        False            False  False  False   \n","\n","   Holand-Netherlands  \n","0               False  \n","1               False  \n","2               False  \n","3               False  \n","4               False  \n","\n","[5 rows x 105 columns]"]},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":["#one hot encoding\n","for feature in val_list:\n","  for val in val_list[feature]:\n","      df_test[val]=df_test[feature]==val\n","df_test=df_test.drop(val_list.keys(),axis=1)\n","df_test['fnlwgt']=df_test['fnlwgt'].astype('int')\n","\n","#preprocessing\n","df_test['sex']=df_test['sex'].replace({'Female':0,'Male':1})\n","df_test['pred_value']=df_test['pred_value'].replace({'<=50K':0,'>50K':1})\n","\n","X_test=df_test.drop(['pred_value'],axis=1)\n","y_test=df_test['pred_value']\n","\n","df_test.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1745986273396,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"mBMqaltYtDL2","outputId":"b26fae7b-3340-43dd-df59-0aa496a6e983"},"outputs":[{"name":"stdout","output_type":"stream","text":["32560 16281\n"]}],"source":["print(X_train.shape[0],X_test.shape[0])"]},{"cell_type":"code","execution_count":199,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":636},"executionInfo":{"elapsed":1000,"status":"ok","timestamp":1746503253183,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"vBWslOm8s09S","outputId":"90f99c76-77e4-479d-fba2-9406189c5d85"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train accuracy: 0.8170555555555555\n","Test accuracy: 0.8221666666666667\n","Train accuracy: 0.8228333333333333\n","Test accuracy: 0.8206666666666667\n","Train accuracy: 0.8526111111111111\n","Test accuracy: 0.8068333333333333\n","Train accuracy: 0.9574444444444444\n","Test accuracy: 0.7556666666666667\n","Train accuracy: 0.9958333333333333\n","Test accuracy: 0.7186666666666667\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["train_err=[]\n","test_err=[]\n","depth_vals=[2,5,10,20,None]\n","for d in depth_vals:\n","  tree_1 = DecisionTreeClassifier(criterion='gini', max_depth=d,random_state=10)\n","  tree_1.fit(X_train, y_train)\n","\n","  y_pred_=tree_1.predict(X_train)\n","  dt_mat=confusion_matrix(y_train,y_pred_)\n","  print(f'Train accuracy: {dt_mat.diagonal().sum()/dt_mat.sum()}')\n","  train_err.append(dt_mat.diagonal().sum()/dt_mat.sum())\n","\n","  y_pred=tree_1.predict(X_test)\n","  dt_mat_test=confusion_matrix(y_test,y_pred)\n","  print(f'Test accuracy: {dt_mat_test.diagonal().sum()/dt_mat_test.sum()}')\n","  test_err.append(dt_mat_test.diagonal().sum()/dt_mat_test.sum())\n","plt.title('Errors for tree depth')\n","plt.plot(depth_vals,train_err,label='train')\n","plt.plot(depth_vals,test_err,label='test')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","source":["train_err=[]\n","test_err=[]\n","n_est_vals=[50,100,250,500]\n","for i in n_est_vals:\n","  abc = AdaBoostClassifier(n_estimators=i, learning_rate=1, random_state=10) #learning_rate\n","  abc.fit(X_train, y_train)\n","\n","  # Predict the response for test dataset\n","  #print(classification_report(y_train, y_pred_abc))\n","\n","  y_pred_=abc.predict(X_train)\n","  abc_mat_test=confusion_matrix(y_train,y_pred_)\n","  #print(f'Train accuracy: {abc_mat_test.diagonal().sum()/abc_mat_test.sum()}')\n","  train_err.append(abc_mat_test.diagonal().sum()/abc_mat_test.sum())\n","\n","  y_pred=abc.predict(X_test)\n","  abc_mat=confusion_matrix(y_test,y_pred)\n","  #print(f'Test accuracy: {abc_mat.diagonal().sum()/abc_mat.sum()}')\n","  test_err.append(abc_mat.diagonal().sum()/abc_mat.sum())\n","plt.title('Errors for number of estimators')\n","plt.plot(n_est_vals,train_err,label='train')\n","plt.plot(n_est_vals,test_err,label='test')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"KKRLP9pPr0Q9"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1317,"status":"ok","timestamp":1746052901958,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"74cihMC-5cOS","outputId":"26d1d558-0320-41ab-eb60-a8c1151d599e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.8704545454545455\n","Test accuracy: 0.8603279896812235\n"]}],"source":["#Fit a tree of depth 10\n","#criterion=['gini','entropy','log-loss']\n","#max_depth=\n","#min_samples_split=\n","#max_samples_leaf=\n","#max_features=\n","#max_leaf_nodes=\n","tree_1 = DecisionTreeClassifier(criterion='gini', max_depth=10,random_state=10)\n","tree_1.fit(X_train, y_train)\n","\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(tree_1, filled=True, feature_names=X.columns.tolist())\n","#plt.show()\n","\n","y_pred_=tree_1.predict(X_train)\n","dt_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {dt_mat_test.diagonal().sum()/dt_mat_test.sum()}')\n","\n","y_pred=tree_1.predict(X_test)\n","dt_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {dt_mat.diagonal().sum()/dt_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5976,"status":"ok","timestamp":1746065617910,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"cIRGb8hwJoIU","outputId":"ae7094a2-bbe3-482d-c8e1-5435fe6ed260"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.9999692874692875\n","Test accuracy: 0.8134021251765862\n"]}],"source":["#Visualizing RF Trees (depth 2)\n","rf = RandomForestClassifier(n_estimators=10, max_depth=X_train.shape[0], max_features=X_train.shape[1], bootstrap=False, random_state=10)\n","rf.fit(X_train, y_train)\n","\n","y_pred_=rf.predict(X_train)\n","rf_mat_test=confusion_matrix(y_train,y_pred_)\n","print(f'Train accuracy: {rf_mat_test.diagonal().sum()/rf_mat_test.sum()}')\n","\n","y_pred=rf.predict(X_test)\n","rf_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {rf_mat.diagonal().sum()/rf_mat.sum()}')\n","\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(rf.estimators_[0], filled=True, feature_names=X.columns.tolist())\n","#plt.show()\n","\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(rf.estimators_[10], filled=True, feature_names=X.columns.tolist())\n","#plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L6hwv-AT6g2Z"},"outputs":[],"source":["#Fitting a RF Classifier\n","rf = RandomForestClassifier(n_estimators=2, max_depth=None, max_features=None, random_state=42) #tune on n_estimators and max_depth\n","rf.fit(X_train, y_train)\n","rf_max_features_=['sqrt', 'log2', 0.5, 10, None]\n","rf_max_depth_=[5, 10, math.log(df.shape[0])/2, df.shape[0]]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1746098162852,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"SzNmXn0le4Je","outputId":"3c1cc344-6190-4469-d57d-35acf7b4e895"},"outputs":[{"data":{"text/plain":["[2, 4, 6, 8, 10, 20, None]"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["list(range(2,11,2))+[20,None]"]},{"cell_type":"markdown","metadata":{"id":"sH5Qc-G4u1i8"},"source":["3 min"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":228589,"status":"ok","timestamp":1746098653889,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"2k3nzPvFe4cj","outputId":"029d48b2-0953-4671-c4a2-7b4db2d6cea8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 3 folds for each of 756 candidates, totalling 2268 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n","756 fits failed out of a total of 2268.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","756 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1382, in wrapper\n","    estimator._validate_params()\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 436, in _validate_params\n","    validate_parameter_constraints(\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\", line 98, in validate_parameter_constraints\n","    raise InvalidParameterError(\n","sklearn.utils._param_validation.InvalidParameterError: The 'criterion' parameter of DecisionTreeClassifier must be a str among {'gini', 'log_loss', 'entropy'}. Got 'log-loss' instead.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.77119168 0.77119168 0.77119168 0.77119168 0.77119168 0.77119168\n"," 0.77119168 0.77119168 0.77119168 0.82800996 0.82800996 0.82800996\n"," 0.82800996 0.82800996 0.82800996 0.82800996 0.82800996 0.82800996\n"," 0.80595788 0.80595788 0.80595788 0.80595788 0.80595788 0.80595788\n"," 0.80598859 0.80598859 0.80598859 0.80595788 0.80595788 0.80595788\n"," 0.80595788 0.80595788 0.80595788 0.80598859 0.80598859 0.80598859\n"," 0.79388808 0.79388808 0.79388808 0.79388808 0.79388808 0.79388808\n"," 0.79401093 0.79401093 0.79401093 0.84484036 0.84484036 0.84484036\n"," 0.84474822 0.84474822 0.84474822 0.84459465 0.84459465 0.84459465\n"," 0.81879644 0.81913428 0.82530704 0.81234708 0.82162208 0.82192887\n"," 0.82524593 0.82524593 0.82524593 0.81879644 0.81913428 0.82530704\n"," 0.81234708 0.82162208 0.82192887 0.82524593 0.82524593 0.82524593\n"," 0.7897725  0.79671374 0.79662166 0.79806502 0.79806502 0.79100162\n"," 0.78915892 0.78915892 0.78915892 0.85254925 0.85254925 0.85254925\n"," 0.8526414  0.8526414  0.85273354 0.85257996 0.85257996 0.85257996\n"," 0.83559587 0.83836014 0.83369197 0.83083524 0.82960671 0.83267815\n"," 0.84060195 0.84060195 0.84060195 0.83559587 0.83836014 0.83369197\n"," 0.83083524 0.82960671 0.83267815 0.84060195 0.84060195 0.84060195\n"," 0.80104445 0.7992628  0.803962   0.80211929 0.80175073 0.79523928\n"," 0.80291772 0.80291772 0.80291772 0.85374703 0.85368561 0.85380847\n"," 0.85374706 0.85374705 0.85402347 0.8541463  0.8541463  0.8541463\n"," 0.83329258 0.83796076 0.83872838 0.83138795 0.83700871 0.84351973\n"," 0.83636375 0.83636375 0.83636375 0.83329258 0.83796076 0.83872838\n"," 0.83138795 0.83700871 0.84351973 0.83636375 0.83636375 0.83636375\n"," 0.81259217 0.81431232 0.81237739 0.8158477  0.82300388 0.81038115\n"," 0.80380827 0.80380827 0.80380827 0.85162781 0.85193494 0.85304059\n"," 0.85242633 0.85261062 0.85368557 0.85383916 0.85383916 0.85383916\n"," 0.83356871 0.83965002 0.83654787 0.83768437 0.84216838 0.8420149\n"," 0.84447173 0.84447173 0.84447173 0.83356871 0.83965002 0.83654787\n"," 0.83768437 0.84216838 0.8420149  0.84447173 0.84447173 0.84447173\n"," 0.818182   0.82635153 0.82874705 0.82653562 0.82364891 0.83065104\n"," 0.82355694 0.82355694 0.82355694 0.83055906 0.83581094 0.84041777\n"," 0.83433668 0.83439808 0.84143128 0.83789931 0.83789931 0.83789931\n"," 0.80568184 0.82023968 0.82810201 0.83866704 0.8358415  0.83504305\n"," 0.8371007  0.8371007  0.8371007  0.80568184 0.82023968 0.82810201\n"," 0.83866704 0.8358415  0.83504305 0.8371007  0.8371007  0.8371007\n"," 0.80141266 0.81514124 0.82278873 0.82905412 0.83031348 0.82942277\n"," 0.82644355 0.82644355 0.82644355 0.81286868 0.82251236 0.82761066\n"," 0.82254306 0.82478504 0.83234035 0.83074326 0.83074326 0.83074326\n"," 0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.7984644  0.7984644  0.7984644  0.7984644  0.7984644  0.7984644\n"," 0.77119168 0.77119168 0.77119168 0.77119168 0.77119168 0.77119168\n"," 0.77119168 0.77119168 0.77119168 0.81968661 0.81968661 0.81968661\n"," 0.81968661 0.81968661 0.81968661 0.81968661 0.81968661 0.81968661\n"," 0.79668328 0.79668328 0.79665257 0.79668328 0.79668328 0.79665257\n"," 0.79665257 0.79665257 0.79665257 0.79668328 0.79668328 0.79665257\n"," 0.79668328 0.79668328 0.79665257 0.79665257 0.79665257 0.79665257\n"," 0.78737694 0.78737694 0.78737694 0.78734622 0.78734622 0.78737694\n"," 0.78734622 0.78734622 0.78734622 0.84361194 0.84361194 0.84361194\n"," 0.84367337 0.84367337 0.84367337 0.84336624 0.84336624 0.84336624\n"," 0.8215297  0.8222054  0.82119151 0.81418986 0.82466225 0.8179669\n"," 0.81179349 0.81179349 0.81179349 0.8215297  0.8222054  0.82119151\n"," 0.81418986 0.82466225 0.8179669  0.81179349 0.81179349 0.81179349\n"," 0.78740788 0.78267827 0.78522725 0.78277041 0.78277041 0.78307738\n"," 0.78949618 0.78949618 0.78949618 0.85282569 0.85279498 0.85270284\n"," 0.85279498 0.85279498 0.85273355 0.85233428 0.85233428 0.85233428\n"," 0.83326172 0.83402951 0.83396794 0.8281019  0.8351966  0.83273961\n"," 0.82493852 0.82493852 0.82493852 0.83326172 0.83402951 0.83396794\n"," 0.8281019  0.8351966  0.83273961 0.82493852 0.82493852 0.82493852\n"," 0.79609966 0.79699015 0.79195321 0.79570021 0.79646791 0.79367317\n"," 0.79364239 0.79364239 0.79364239 0.85426917 0.85414632 0.85420775\n"," 0.85426917 0.85414632 0.85436131 0.85371636 0.85371636 0.85371636\n"," 0.84127768 0.83667094 0.83829857 0.83341537 0.83504306 0.83445957\n"," 0.83854434 0.83854434 0.83854434 0.84127768 0.83667094 0.83829857\n"," 0.83341537 0.83504306 0.83445957 0.83854434 0.83854434 0.83854434\n"," 0.81369802 0.80236463 0.81191631 0.81022715 0.8069101  0.81695322\n"," 0.81781329 0.81781329 0.81781329 0.85485276 0.85509848 0.85537489\n"," 0.8546992  0.85500632 0.85555915 0.85491422 0.85491422 0.85491422\n"," 0.83289335 0.83541164 0.83765368 0.84063275 0.8416157  0.84514744\n"," 0.8440111  0.8440111  0.8440111  0.83289335 0.83541164 0.83765368\n"," 0.84063275 0.8416157  0.84514744 0.8440111  0.8440111  0.8440111\n"," 0.8273649  0.82435505 0.83065125 0.82533766 0.83215613 0.82684298\n"," 0.82349513 0.82349513 0.82349513 0.83295458 0.83587225 0.83909715\n"," 0.8368858  0.83805287 0.84020278 0.83547317 0.83547317 0.83547317\n"," 0.81182423 0.82263517 0.82794855 0.83928135 0.83688579 0.84057126\n"," 0.84219904 0.84219904 0.84219904 0.81182423 0.82263517 0.82794855\n"," 0.83928135 0.83688579 0.84057126 0.84219904 0.84219904 0.84219904\n"," 0.8023957  0.8137285  0.81934894 0.82659705 0.82899269 0.82794872\n"," 0.828317   0.828317   0.828317   0.81511055 0.81953316 0.82466222\n"," 0.82042388 0.82149882 0.82635139 0.82816338 0.82816338 0.82816338\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan]\n","  warnings.warn(\n"]},{"data":{"text/html":["<style>#sk-container-id-7 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-7 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-7 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-7 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-7 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-7 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-7 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-7 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-7 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-7 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-7 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-7 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-7 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-7 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-7 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-7 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-7 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-7 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-7 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-7 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-7 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-7 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-7 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-7 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-7 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-7 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-7 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-7 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-7 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-7 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-7 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-7 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-7 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-7 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=10),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log-loss&#x27;],\n","                         &#x27;max_depth&#x27;: [2, 4, 6, 8, 10, 20, None],\n","                         &#x27;max_features&#x27;: [10, &#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n","                         &#x27;min_samples_leaf&#x27;: [1, 2, 5],\n","                         &#x27;min_samples_split&#x27;: [2, 5, 10]},\n","             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=10),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log-loss&#x27;],\n","                         &#x27;max_depth&#x27;: [2, 4, 6, 8, 10, 20, None],\n","                         &#x27;max_features&#x27;: [10, &#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n","                         &#x27;min_samples_leaf&#x27;: [1, 2, 5],\n","                         &#x27;min_samples_split&#x27;: [2, 5, 10]},\n","             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, min_samples_leaf=2,\n","                       min_samples_split=10, random_state=10)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, min_samples_leaf=2,\n","                       min_samples_split=10, random_state=10)</pre></div> </div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=10),\n","             param_grid={'criterion': ['gini', 'entropy', 'log-loss'],\n","                         'max_depth': [2, 4, 6, 8, 10, 20, None],\n","                         'max_features': [10, 'sqrt', 'log2', None],\n","                         'min_samples_leaf': [1, 2, 5],\n","                         'min_samples_split': [2, 5, 10]},\n","             verbose=1)"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["params = {'criterion':['gini','entropy','log-loss'],\n","'max_depth':list(range(2,11,2))+[20,None],\n","'min_samples_split':[2,5,10],\n","'min_samples_leaf':[1,2,5],\n","'max_features':[10,'sqrt','log2',None]}\n","grid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=10), params, verbose=1, cv=3)\n","grid_search_cv.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":48,"status":"ok","timestamp":1746098677709,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"nnsMsENSkjxI","outputId":"e0b62478-d246-46d5-a0e9-4760e272e030"},"outputs":[{"data":{"text/plain":["{'criterion': 'entropy',\n"," 'max_depth': 10,\n"," 'max_features': None,\n"," 'min_samples_leaf': 2,\n"," 'min_samples_split': 10}"]},"execution_count":54,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1746098790633,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_WJ_gJYki50I","outputId":"734b3982-3f1a-4f6a-eaf3-e236fa0b8f1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.8610036238560285\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","dt_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {dt_mat.diagonal().sum()/dt_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7610406,"status":"ok","timestamp":1746124293823,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"fXpcp65yjR2w","outputId":"33c40285-f314-4787-8f0f-8bc5156be819"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 2 folds for each of 432 candidates, totalling 864 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n","288 fits failed out of a total of 864.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","288 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1382, in wrapper\n","    estimator._validate_params()\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 436, in _validate_params\n","    validate_parameter_constraints(\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\", line 98, in validate_parameter_constraints\n","    raise InvalidParameterError(\n","sklearn.utils._param_validation.InvalidParameterError: The 'criterion' parameter of RandomForestClassifier must be a str among {'log_loss', 'gini', 'entropy'}. Got 'log-loss' instead.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [0.83194103 0.83786855 0.83955774 0.83323096 0.83673219 0.83885135\n"," 0.82933047 0.83614865 0.83869779 0.83194103 0.83786855 0.83955774\n"," 0.83323096 0.83673219 0.83885135 0.82933047 0.83614865 0.83869779\n"," 0.81765971 0.81062654 0.8110258  0.81701474 0.80988943 0.81022727\n"," 0.81661548 0.8083231  0.80998157 0.8529484  0.85316339 0.85334767\n"," 0.85285627 0.85304054 0.85325553 0.85248771 0.85304054 0.8531941\n"," 0.85359337 0.85703317 0.8578317  0.85199631 0.85605037 0.85715602\n"," 0.8529484  0.85648034 0.85589681 0.85359337 0.85703317 0.8578317\n"," 0.85199631 0.85605037 0.85715602 0.8529484  0.85648034 0.85589681\n"," 0.8421683  0.84874079 0.84987715 0.84146192 0.84720516 0.84864865\n"," 0.83826781 0.84834152 0.84763514 0.85936732 0.86025799 0.85896806\n"," 0.85942875 0.86062654 0.85887592 0.85967445 0.85985872 0.85850737\n"," 0.85411548 0.86136364 0.86188575 0.85687961 0.86038084 0.86087224\n"," 0.85715602 0.85927518 0.85933661 0.85411548 0.86136364 0.86188575\n"," 0.85687961 0.86038084 0.86087224 0.85715602 0.85927518 0.85933661\n"," 0.8504914  0.85847666 0.85912162 0.85233415 0.85724816 0.85801597\n"," 0.85015356 0.85420762 0.85451474 0.85162776 0.85804668 0.85887592\n"," 0.85374693 0.85967445 0.8595516  0.85734029 0.8595516  0.8607801\n"," 0.84573096 0.85436118 0.85589681 0.85672604 0.86243857 0.86262285\n"," 0.85902948 0.86065725 0.86016585 0.84573096 0.85436118 0.85589681\n"," 0.85672604 0.86243857 0.86262285 0.85902948 0.86065725 0.86016585\n"," 0.84087838 0.85107494 0.85307125 0.85282555 0.85915233 0.85973587\n"," 0.85135135 0.85469902 0.85479115 0.84815725 0.85334767 0.8536855\n"," 0.84963145 0.85586609 0.85651106 0.85531327 0.85835381 0.85872236\n"," 0.83209459 0.83621007 0.83792998 0.83310811 0.8362715  0.83805283\n"," 0.82705774 0.83608722 0.8375     0.83209459 0.83621007 0.83792998\n"," 0.83310811 0.8362715  0.83805283 0.82705774 0.83608722 0.8375\n"," 0.81068796 0.80770885 0.80869165 0.80804668 0.80921376 0.80869165\n"," 0.80429975 0.80598894 0.80909091 0.84867936 0.84883292 0.8482801\n"," 0.8487715  0.84883292 0.84821867 0.84858722 0.8487715  0.84818796\n"," 0.85107494 0.85764742 0.85737101 0.85276413 0.85635749 0.85709459\n"," 0.85214988 0.85522113 0.85503686 0.85107494 0.85764742 0.85737101\n"," 0.85276413 0.85635749 0.85709459 0.85214988 0.85522113 0.85503686\n"," 0.84226044 0.84889435 0.84898649 0.83409091 0.84745086 0.84766585\n"," 0.83964988 0.84711302 0.84619165 0.8578317  0.85949017 0.85896806\n"," 0.85850737 0.85942875 0.85847666 0.85780098 0.85841523 0.85789312\n"," 0.85390049 0.85985872 0.86130221 0.85786241 0.86050369 0.8612715\n"," 0.85525184 0.85952088 0.85902948 0.85390049 0.85985872 0.86130221\n"," 0.85786241 0.86050369 0.8612715  0.85525184 0.85952088 0.85902948\n"," 0.85116708 0.86013514 0.85887592 0.85224201 0.85810811 0.85730958\n"," 0.85227273 0.85380835 0.85374693 0.8539312  0.85949017 0.85998157\n"," 0.85503686 0.85998157 0.86062654 0.85598894 0.85933661 0.86019656\n"," 0.84566953 0.85374693 0.85580467 0.85780098 0.86136364 0.86228501\n"," 0.85724816 0.85982801 0.85992015 0.84566953 0.85374693 0.85580467\n"," 0.85780098 0.86136364 0.86228501 0.85724816 0.85982801 0.85992015\n"," 0.84247543 0.85153563 0.8529484  0.85273342 0.85896806 0.85976658\n"," 0.84898649 0.85426904 0.85420762 0.84880221 0.85362408 0.85503686\n"," 0.84917076 0.85429975 0.85672604 0.85469902 0.85752457 0.85798526\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Execution time: 8029.161843776703 seconds\n"]}],"source":["start_time = time.time()\n","\n","params = {'n_estimators':[10,100,1000],\n","'criterion':['gini','entropy','log-loss'],\n","'max_depth':[5,10,20,None],\n","'min_samples_leaf':[1,2,5],\n","'max_features':[10,'sqrt','log2',None]}\n","grid_search_cv = GridSearchCV(RandomForestClassifier(random_state=10), params, verbose=1, cv=2)\n","grid_search_cv.fit(X_train, y_train)\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1746125837404,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"He3xtODDjSQ9","outputId":"265e4ea3-9138-43d5-b76e-4458633a7079"},"outputs":[{"data":{"text/plain":["{'criterion': 'gini',\n"," 'max_depth': None,\n"," 'max_features': 10,\n"," 'min_samples_leaf': 2,\n"," 'n_estimators': 1000}"]},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5146,"status":"ok","timestamp":1746125867286,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"QWRRTxO3jS7a","outputId":"2e1b4f25-ae20-460f-acdf-d4d3f65234f0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.8647503224617652\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","rf_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {rf_mat.diagonal().sum()/rf_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2498419,"status":"ok","timestamp":1746131305920,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"VXOZshR9l1Kz","outputId":"0682f077-410c-4e6a-d79a-f120852e197f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 2 folds for each of 24 candidates, totalling 48 fits\n","Execution time: 2498.423091173172 seconds\n"]}],"source":["start_time = time.time()\n","\n","params = {'n_estimators':[10,50,100,500],\n","'learning_rate':[0.2,0.5,1,2,5,10]}\n","grid_search_cv = GridSearchCV(AdaBoostClassifier(random_state=10), params, verbose=1, cv=2)\n","grid_search_cv.fit(X_train, y_train)\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1746131392775,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"4QYqXE4jVual","outputId":"4aa176ac-f97f-4535-ffb2-26404f1636d7"},"outputs":[{"data":{"text/plain":["{'learning_rate': 1, 'n_estimators': 500}"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":49858,"status":"ok","timestamp":1746131450506,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_xULS5YkVuSB","outputId":"fc329369-81db-4a2f-e7fc-73fbd0ee4761"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.8596523555064185\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","rf_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {rf_mat.diagonal().sum()/rf_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"k5oXBQyHuMJO","outputId":"3a80f28d-87a6-4f74-b2ed-febd0a9e79ca"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 2 folds for each of 144 candidates, totalling 288 fits\n","Execution time: 958.007984161377 seconds\n"]}],"source":["start_time = time.time()\n","\n","params = {'n_estimators':[10,50,100,500],\n","'learning_rate':[0.3,1,3,10],\n","'min_samples_leaf':[1,2,5],\n","'max_features':['sqrt','log2',None]}\n","grid_search_cv = GridSearchCV(GradientBoostingClassifier(random_state=10), params, verbose=1, cv=2)\n","grid_search_cv.fit(X_train, y_train)\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"]},{"cell_type":"code","execution_count":104,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1746487568492,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"M6O35IQhvEuB","outputId":"592473d3-2103-4ba9-b21c-d02ca2f2f1d3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'learning_rate': 0.3,\n"," 'max_features': None,\n"," 'min_samples_leaf': 5,\n"," 'n_estimators': 100}"]},"metadata":{},"execution_count":104}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":105,"metadata":{"id":"p7llewl-vEUS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746487572548,"user_tz":240,"elapsed":12,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"e9acc3d2-3e0f-4e6d-87ab-62a3be8e70b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test accuracy: 0.8749462563724587\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","gb_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gb_mat.diagonal().sum()/gb_mat.sum()}')"]},{"cell_type":"markdown","metadata":{"id":"HuDdR3nUM5Ri"},"source":["**1.a.iii.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"executionInfo":{"elapsed":147,"status":"ok","timestamp":1746479495577,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"jHp6Z2xJSig0","outputId":"c6e59480-2a66-47ca-c68a-77a754c79c01"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train"},"text/html":["\n","  <div id=\"df-289d0d84-2c9b-4b4f-9912-5d7c0870f631\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>fnlwgt</th>\n","      <th>education-num</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>Private</th>\n","      <th>Self-emp-not-inc</th>\n","      <th>Self-emp-inc</th>\n","      <th>...</th>\n","      <th>Guatemala</th>\n","      <th>Nicaragua</th>\n","      <th>Scotland</th>\n","      <th>Thailand</th>\n","      <th>Yugoslavia</th>\n","      <th>El-Salvador</th>\n","      <th>Trinadad&amp;Tobago</th>\n","      <th>Peru</th>\n","      <th>Hong</th>\n","      <th>Holand-Netherlands</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>77516</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>2174</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>83311</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>215646</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>234721</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>338409</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>32556</th>\n","      <td>27</td>\n","      <td>257302</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>32557</th>\n","      <td>40</td>\n","      <td>154374</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>32558</th>\n","      <td>58</td>\n","      <td>151910</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>32559</th>\n","      <td>22</td>\n","      <td>201490</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>32560</th>\n","      <td>52</td>\n","      <td>287927</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>15024</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>32561 rows × 104 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-289d0d84-2c9b-4b4f-9912-5d7c0870f631')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-289d0d84-2c9b-4b4f-9912-5d7c0870f631 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-289d0d84-2c9b-4b4f-9912-5d7c0870f631');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0c1ac8d0-1e19-451b-9c0a-618a01da69fa\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c1ac8d0-1e19-451b-9c0a-618a01da69fa')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0c1ac8d0-1e19-451b-9c0a-618a01da69fa button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_682d0bd4-c463-4a2d-8040-7b1ccc892830\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_682d0bd4-c463-4a2d-8040-7b1ccc892830 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["      age  fnlwgt education-num  sex capital-gain capital-loss hours-per-week  \\\n","0      39   77516            13    1         2174            0             40   \n","1      50   83311            13    1            0            0             13   \n","2      38  215646             9    1            0            0             40   \n","3      53  234721             7    1            0            0             40   \n","4      28  338409            13    0            0            0             40   \n","...    ..     ...           ...  ...          ...          ...            ...   \n","32556  27  257302            12    0            0            0             38   \n","32557  40  154374             9    1            0            0             40   \n","32558  58  151910             9    0            0            0             40   \n","32559  22  201490             9    1            0            0             20   \n","32560  52  287927             9    0        15024            0             40   \n","\n","       Private  Self-emp-not-inc  Self-emp-inc  ...  Guatemala  Nicaragua  \\\n","0        False             False         False  ...      False      False   \n","1        False              True         False  ...      False      False   \n","2         True             False         False  ...      False      False   \n","3         True             False         False  ...      False      False   \n","4         True             False         False  ...      False      False   \n","...        ...               ...           ...  ...        ...        ...   \n","32556     True             False         False  ...      False      False   \n","32557     True             False         False  ...      False      False   \n","32558     True             False         False  ...      False      False   \n","32559     True             False         False  ...      False      False   \n","32560    False             False          True  ...      False      False   \n","\n","       Scotland  Thailand  Yugoslavia  El-Salvador  Trinadad&Tobago   Peru  \\\n","0         False     False       False        False            False  False   \n","1         False     False       False        False            False  False   \n","2         False     False       False        False            False  False   \n","3         False     False       False        False            False  False   \n","4         False     False       False        False            False  False   \n","...         ...       ...         ...          ...              ...    ...   \n","32556     False     False       False        False            False  False   \n","32557     False     False       False        False            False  False   \n","32558     False     False       False        False            False  False   \n","32559     False     False       False        False            False  False   \n","32560     False     False       False        False            False  False   \n","\n","        Hong  Holand-Netherlands  \n","0      False               False  \n","1      False               False  \n","2      False               False  \n","3      False               False  \n","4      False               False  \n","...      ...                 ...  \n","32556  False               False  \n","32557  False               False  \n","32558  False               False  \n","32559  False               False  \n","32560  False               False  \n","\n","[32561 rows x 104 columns]"]},"execution_count":84,"metadata":{},"output_type":"execute_result"}],"source":["X_train"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1104,"status":"ok","timestamp":1746479565478,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"yzOu9xbd51vX","outputId":"df2b48d6-23d4-4783-fad1-4940bcebde03"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 2000x2000 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["dt=DecisionTreeClassifier(criterion='entropy', max_depth=10, max_features=None, min_samples_leaf=2, min_samples_split=10, random_state=10)\n","dt.fit(X_train, y_train)\n","plt.figure(figsize=(20, 20))\n","plot_tree(dt, filled=True, feature_names=X_train.columns.tolist(), max_depth=3)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"elapsed":9478,"status":"ok","timestamp":1746479665013,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"6YVbleEG5UhL","outputId":"c427632c-1a2c-4e37-8407-c337b38b7e5c"},"outputs":[{"data":{"text/html":["<style>#sk-container-id-6 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-6 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-6 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-6 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-6 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-6 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-6 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-6 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-6 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-6 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-6 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-6 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-6 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-6 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-6 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-6 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-6 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-6 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-6 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-6 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-6 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_features=10, min_samples_leaf=2, random_state=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_features=10, min_samples_leaf=2, random_state=10)</pre></div> </div></div></div></div>"],"text/plain":["RandomForestClassifier(max_features=10, min_samples_leaf=2, random_state=10)"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["rf=RandomForestClassifier(n_estimators=100, criterion='gini', max_depth=None, max_features=10, min_samples_leaf=2, random_state=10)\n","rf.fit(X_train, y_train)\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(rf, filled=True, feature_names=X_train.columns.tolist(), max_depth=3)\n","#plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"elapsed":58481,"status":"ok","timestamp":1746479350165,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_z5_SAg16319","outputId":"477e5aff-5add-4313-af30-0a99b864fd14"},"outputs":[{"data":{"text/html":["<style>#sk-container-id-4 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-4 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-4 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-4 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-4 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-4 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-4 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-4 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-4 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-4 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-4 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-4 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-4 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-4 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-4 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-4 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-4 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier(learning_rate=1, n_estimators=100)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>AdaBoostClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.AdaBoostClassifier.html\">?<span>Documentation for AdaBoostClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>AdaBoostClassifier(learning_rate=1, n_estimators=100)</pre></div> </div></div></div></div>"],"text/plain":["AdaBoostClassifier(learning_rate=1, n_estimators=100)"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["ab=AdaBoostClassifier(n_estimators=100,learning_rate=1)\n","ab.fit(X_train, y_train)\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(ab, filled=True, feature_names=X_train.columns.tolist())\n","#plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"elapsed":19248,"status":"ok","timestamp":1746479374519,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"LlKvgsZf6PKn","outputId":"58ef3313-4a94-461d-8377-89090a3ce706"},"outputs":[{"data":{"text/html":["<style>#sk-container-id-5 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-5 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-5 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-5 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-5 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-5 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-5 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-5 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-5 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-5 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-5 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-5 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-5 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-5 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-5 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-5 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-5 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(learning_rate=0.3, min_samples_leaf=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GradientBoostingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\">?<span>Documentation for GradientBoostingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GradientBoostingClassifier(learning_rate=0.3, min_samples_leaf=5)</pre></div> </div></div></div></div>"],"text/plain":["GradientBoostingClassifier(learning_rate=0.3, min_samples_leaf=5)"]},"execution_count":80,"metadata":{},"output_type":"execute_result"}],"source":["gb=GradientBoostingClassifier(learning_rate=0.3,max_features=None,min_samples_leaf=5,n_estimators=100)\n","gb.fit(X_train, y_train)\n","#plt.figure(figsize=(10, 10))\n","#plot_tree(gb, filled=True, feature_names=X_train.columns.tolist())\n","#plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1746479441677,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"KXp6Lbz0SUQX","outputId":"11b811e9-68ad-47d5-8718-271d0a1a1d98"},"outputs":[{"data":{"text/plain":["array([0.06464018, 0.00687096, 0.01269548, 0.00609424, 0.39934823,\n","       0.09888076, 0.00712546, 0.02470344, 0.0159332 , 0.01185517,\n","       0.07554204, 0.03235934, 0.09083371, 0.04528932, 0.05052058,\n","       0.03642979, 0.0208781 ])"]},"execution_count":83,"metadata":{},"output_type":"execute_result"}],"source":["dt.feature_importances_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1746479669470,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"HsHhgEtKS-BO","outputId":"9364b047-1158-4284-da0f-178f361db5f9"},"outputs":[{"name":"stdout","output_type":"stream","text":["104\n","104\n","104\n","104\n","104\n"]}],"source":["print(len(X_train.columns))\n","print(len(dt.feature_importances_))\n","print(len(rf.feature_importances_))\n","print(len(ab.feature_importances_))\n","print(len(gb.feature_importances_))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"executionInfo":{"elapsed":659,"status":"ok","timestamp":1746479823226,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"-GWtiNqzPtxA","outputId":"40a0f90b-e70d-49d4-bc92-224f69eb9ae5"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1300x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["feature_importance = pd.DataFrame({'Feature': X_train.columns,\n","                                   'Decision Tree': dt.feature_importances_,\n","                                   'Random Forest': rf.feature_importances_,\n","                                   'AdaBoost': ab.feature_importances_,\n","                                   'Gradient Boosting': gb.feature_importances_})\n","#sort by random forest and take the 20 most important features\n","feature_importance = feature_importance.set_index('Feature').sort_values(by='Random Forest', ascending=False)\n","feature_importance_20 = feature_importance.iloc[:20,:]\n","\n","# Normalize the importance values\n","feature_importance_20 = feature_importance_20 / feature_importance_20.sum()\n","feature_importance_20.plot.bar(figsize=(13, 5), width=0.9)\n","plt.title('Feature Importance')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"t4LQjx2sNDUm"},"source":["**1.b.i.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":727},"executionInfo":{"elapsed":151414,"status":"ok","timestamp":1746205538393,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"_qMXXR3yyuQK","outputId":"096aa5b6-afb3-4c11-d126-668dc02e9880"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy for (50,): 0.8452702702702702\n","Test accuracy for (50,): 0.8454026165468952\n","Train accuracy for (100,): 0.8468058968058968\n","Test accuracy for (100,): 0.8467538848965052\n","Train accuracy for (50, 50): 0.80242628992629\n","Test accuracy for (50, 50): 0.8022234506479946\n","Train accuracy for (50, 100): 0.8002149877149877\n","Test accuracy for (50, 100): 0.8015478164731896\n","Train accuracy for (100, 50): 0.8076167076167076\n","Test accuracy for (100, 50): 0.8081813156440022\n","Train accuracy for (100, 100): 0.797911547911548\n","Test accuracy for (100, 100): 0.7992752287943001\n"]},{"data":{"text/plain":["<Axes: >"]},"execution_count":28,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["np.random.seed(0)\n","#hidden_layer_sizes=\n","#activation=['logistic','relu']\n","#solver=['sgd','adam']\n","#learning_rate_init=[0.005,0.05,0.5]\n","#random_state=[1,2,3]\n","\n","errors=np.zeros((6,2))\n","\n","layer_size=(50,)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[0,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","layer_size=(100,)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[1,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","layer_size=(50,50)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[2,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","layer_size=(50,100)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[3,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","layer_size=(100,50)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[4,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","layer_size=(100,100)\n","mlp = MLPClassifier(hidden_layer_sizes=layer_size, max_iter=3000, activation='relu',\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","mlp.fit(X_train, y_train)\n","print(f\"Train accuracy for {layer_size}: {mlp.score(X_train, y_train)}\")\n","print(f\"Test accuracy for {layer_size}: {mlp.score(X_test, y_test)}\")\n","errors[5,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","pd.DataFrame(errors,columns=['Test Error','Train Error'],index=[(50,),(100,),(50,50),(50,100),(100,50),(100,100)]).plot(kind='bar')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":598},"executionInfo":{"elapsed":95842,"status":"ok","timestamp":1746217305851,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"JiJdWabwyt0m","outputId":"2b5e7bf9-d753-4d2b-89d2-a042c86fca85"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy for identity: 0.7976351351351352\n","Test accuracy for identity: 0.7992752287943001\n","Train accuracy for logistic: 0.7610257985257985\n","Test accuracy for logistic: 0.7662305755174743\n","Train accuracy for relu: 0.8452702702702702\n","Test accuracy for relu: 0.8454026165468952\n"]},{"data":{"text/plain":["<Axes: >"]},"execution_count":14,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAiMAAAHECAYAAADrgyoWAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAMnNJREFUeJzt3X1cVGX+//H3gDCIN4AioMQulubNpoAQfNEtq6Voa027+UY3q0SJPyvKnGpXKqEyw9YkdsuWMtmyrGhbt+ynSxlF+6soTDOz1NJUvBuQTFBMsGF+f7hNOwHqoHAJ83o+HuexzDXXdc5nYjbeXec651icTqdTAAAAhviYLgAAAHg3wggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAo7qZLuB4NDU1adeuXerVq5csFovpcgAAwHFwOp3av3+/BgwYIB+f1uc/OkUY2bVrl6KiokyXAQAA2mD79u067bTTWn2/U4SRXr16STryYXr37m24GgAAcDzq6uoUFRXl+jvemk4RRn48NdO7d2/CCAAAncyxlliwgBUAABhFGAEAAEZ1itM0AIDOzeFw6PDhw6bLwEnm5+cnX1/fE94PYQQA0G6cTqfsdrv27dtnuhS0k+DgYEVERJzQrTcIIwCAdvNjEAkLC1NgYCD3iupCnE6nDh48qOrqaklS//7927wvwggAoF04HA5XEOnbt6/pctAOunfvLkmqrq5WWFhYm0/ZsIAVANAuflwjEhgYaLgStKcff78nsiaIMAIAaFecmunaTsbvlzACAACMIowAAACjWMAKAOhQ0TOWdejxts65tEOP15Lo6GjdcccduuOOO0yXckpiZgQAgP+wWCxH3e6///427XflypWaMmXKCdV23nnntVjT1KlTT2i/pwJmRgAA+I/du3e7fi4uLlZOTo42btzoauvZs6frZ6fTKYfDoW7djv2ntF+/fielvszMTD344INubUe7Wunw4cPy8/Nza2tsbJS/v7/Hx27ruOPBzAgAAP8RERHh2oKCgmSxWFyvN2zYoF69eulf//qX4uPjZbVa9f7772vz5s0aP368wsPD1bNnT5199tl6++233fYbHR2tgoIC12uLxaJnnnlGl19+uQIDAzV48GAtXbr0mPUFBga61RgREeF6mv3WrVtlsVhUXFyssWPHKiAgQIsXL9YNN9ygCRMmaPbs2RowYICGDBkiSfr88891wQUXqHv37urbt6+mTJmiAwcOuI7V2rj2wMwIAKBLW7tjn8djRvpskb7bJjkd0q5PjzTWfC1JmnHnND2aM12n/yJSIUHS9m8+0SWjz9Lsab+X1d9fi179vxo37nfa+O8l+kXkf+5K6miUanf8tC9JD+Tcpz/dN01z77pBj/+tWNdfd622fbxMfUKCWi6q8YB0oPqnfQyIa7HbjBkzNG/ePMXFxSkgIEBlZWUqLS1V7969tWLFCklSfX29UlNTlZycrJUrV6q6ulqTJ09WVlaWnn32Wde+fj6uvRBGAADwwIN336wLz/0f1+s+IUGK+dWZrtez/nCL/lnyrpa+9Z6yMq5pdT83XD1O1064WJL08Iws/WXhS6pYs04Xnz+m1TFPLvq7nnnptSMvLEdObjz11FO6/vrrXX3uuOMOXXHFFW7jevTooWeeecZ1mmXBggU6dOiQFi1apB49ekiSnnjiCY0bN06PPPKIwsPDWxzXXggjAAB4IGHkcLfXB+oP6v55T2lZ6f/T7uoa/fCDQ98falDlTvtR9zNy2GDXzz0Cu6t3r56qrvnuqGOuv/y3uvf2m468CP/Vkf/5T3Bw1ZeQ0GzciBEj3ALF+vXrFRMT4woikjRmzBg1NTVp48aNrn3+fFx7IYwAAOCBHoHd3V7f9eBjWvH/PtajM+/QoOgodQ+w6qopf1Bj49Fvj+7n5/4n2GKRmpqajjomqFdPDRr4iyMvBgxqub7/ChhHazsebR3nKRawAgBwAj745DPd8L/jdPlvL9CIYYMVERaqrTt2mS7rqIYNG6bPPvtM9fX1rrYPPvhAPj4+7bpQtTWEEQAATsDggVFa8q93tGbdRn32xVe67tZ71NTkbJdjHTx0SPbqmiOb3S673a7vvjv6qZ2WXH/99QoICFB6errWrVund999V7fddpsmTpzY7LRPR+A0DQCgQy3Nan2BZmeUn3unbrTdr9HjMxTaJ1h/vDVddQfqjzmuLRYs/qcWLP6nW1tqaqpKSko82k9gYKDefPNNTZs2TWeffbYCAwN15ZVXKj8//2SWe9wsTqezfeLbSVRXV6egoCDV1ta6rqcGAJzaDh06pC1btmjgwIEKCAhwtbflUtuONtJni+kSjq2VS3s7Wmu/Z+n4/35zmgYAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUW0KI/Pnz1d0dLQCAgKUlJSkioqKo/YvKCjQkCFD1L17d0VFRWn69Ok6dOhQmwoGAABdi8dhpLi4WDabTbm5uVq9erViYmKUmpqq6urqFvu/+OKLmjFjhnJzc7V+/XotXLhQxcXFuueee064eAAA0Pl5fDv4/Px8ZWZmKiMjQ5JUWFioZcuWqaioSDNmzGjW/8MPP9SYMWN03XXXSZKio6N17bXX6uOPPz7B0gEAndHIZ37ZocdbO3nbcfeNiQo56vu5tim6/86pbarDEjlK/1w4TxMuPv+Y/Vry0pN5umZ8apuOfarzKIw0NjZq1apVys7OdrX5+PgoJSVF5eXlLY4ZPXq0XnjhBVVUVCgxMVHffPONli9frokTJ7Z6nIaGBjU0NLhe19XVeVImAABtUrpqgyRpuE+lipe+pZxHC7Xx30tc7/fsEdghdfwt/35dfP5ot7bg3r1a7OtwOGSxWOTj436yo7GxUf7+/h4fu63jToRHYaSmpkYOh6PZE/3Cw8O1YcOGFsdcd911qqmp0a9//Ws5nU798MMPmjp16lFP0+Tl5emBBx7wpDQcr/uDTFdwfO6vNV0BAC8UGnbk71uEz0EF9eopi0WKCAt1vf/Mi//UvKee15btuxR92gDdfuM1uuWGqyVJjY2HZXtgnv6x/B19V1un8NA+mjrxKmXfdqOiky6VJF1+052SpF+e1l9bP17Wah3BQb3cjvvfni1eqjvuf1SLnl+sGTNm6KuvvtKmTZt03nnn6aabbtLXX3+t1157TVdccYWeffZZ/eMf/1BOTo42bdqk/v3767bbbtOdd97p2l90dHSL4zpSuz+1t6ysTA8//LCefPJJJSUladOmTZo2bZpmzZqlmTNntjgmOztbNpvN9bqurk5RUVHtXeoJi57R+hfrVLE14Nh9AADNLV6yXDmP/lVPPPRHxZ01VJ+u26DMux9Sj8DuSr96nP5S9JKWvvVvvVI4R7+IjND2XVXavqtKkrRy+QsKG/kb14yHr6/vCdVy8PtDeuSRR/TMM8+ob9++CgsLkyQ9+uijysnJUW5uriRp1apVuvrqq3X//fcrLS1NH374oW655Rb17dtXN9xwg2t/Px/X0TwKI6GhofL19VVVVZVbe1VVlSIiIlocM3PmTE2cOFGTJ0+WJI0YMUL19fWaMmWK7r333mbTSpJktVpltVo9KQ0AgHaVO69Q83JsuuKS30iSBv4iUl9+tUVPvfAPpV89TpU77Ro8MEq/ToyTxWLRL08b4Brbr++RtShHm/H4b9feeo98f/b38cuyV/WLyP6SpMOHf9CTTz6pmJgYtz4XXHCB26zH9ddfr9/85jeu//g/88wz9eWXX2ru3LluYeTn4zqaR2HE399f8fHxKi0t1YQJEyRJTU1NKi0tVVZWVotjDh482Cxw/JgInU5nG0oGAKBj1R/8Xpu37tBNdz6ozLtnudp/cDgU1KunJOmGq8fpwmtu0ZBzLtfF54/W71LO0UVjk9t0vMdy71TKOYlubQPC+7l+9vf308iRI5uNS0hIcHu9fv16jR8/3q1tzJgxKigokMPhcP09/vm4jubxaRqbzab09HQlJCQoMTFRBQUFqq+vd11dM2nSJEVGRiovL0+SNG7cOOXn5ysuLs51mmbmzJkaN27cCU9TAQDQEQ7UH5QkLZh7n5LiznJ778e/ZaNGDNOWj97Qv975QG+/X6Grp/5RKb9O0qsL5np8vIiwvho08Betvt89wCqLxdKsvUePHh4f60TGnSweh5G0tDTt2bNHOTk5stvtio2NVUlJiWtRa2VlpdtMyH333SeLxaL77rtPO3fuVL9+/TRu3DjNnj375H0KAADaUXi/vhoQ0U/fbNup66+4pNV+vXv1VNr4VKWNT9VVl/5GF1+fpb3f1apPSJD8/LrJ4WjqwKqlYcOG6YMPPnBr++CDD3TmmWeeUhMCbVrAmpWV1eppmbKyMvcDdOum3NxcY4tiAAA4GR64c6punzlXQb176uLzRquhsVGfrP1S3+3bL9v/+b3yn3pB/cNDFXfWEPlYfPT3//u2IsJCFRx05JLc6NMGqPT9Co05O0ZWf3+FBPdu9Vj7avfLXl3j1tarZw/1COzuUc133nmnzj77bM2aNUtpaWkqLy/XE088oSeffNLzfwDtqN2vpgEAoCuYfN3lCuweoLl/XaS7HypQj8DuGjF0kO6YfOSmnr16BupPTz6nr7dUytfXV2fHDNfy5//iOlswL2e6bA/ka8GL/1RkRL+jXtqbYbu/WVte9m2akZXhUc2jRo3SK6+8opycHM2aNUv9+/fXgw8+6LZ49VRgcXaCVaR1dXUKCgpSbW2tevduPUma1jku7b3OdAnHh/uMAJ3eoUOHtGXLFg0cOFABAT/dV2Dtjn3mijpOI322mC7h2AbEma5AUuu/Z+n4/37z1F4AAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBSX9gIwrzM8TZorvNqsE1y0iRNwMn6/zIwAANqFn5+fpCPPKEPX9ePv98ffd1swMwJ0YZ3h3jeStDXg2H3Q+fj6+io4OFjV1dWSpMDAQFksFjl/aDRc2bEd8ukEszmHDhk9vNPp1MGDB1VdXa3g4OATur08YQQA0G4iIiIkyRVIJKn6u+9NlXPc/C17TJdwbPWnxo3ZgoODXb/ntiKMAADajcViUf/+/RUWFqbDhw9LkiYvKTNb1HEotd5luoRjy/rEdAXy8/M7KQ/cI4wAANqdr6+v64/Wzv0Ow9UcW8Dh7aZLOLaArnN+kwWsAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCqTWFk/vz5io6OVkBAgJKSklRRUdFq3/POO08Wi6XZdumll7a5aAAA0HV4HEaKi4tls9mUm5ur1atXKyYmRqmpqaqurm6x/5IlS7R7927Xtm7dOvn6+up///d/T7h4AADQ+XkcRvLz85WZmamMjAwNHz5chYWFCgwMVFFRUYv9+/Tpo4iICNe2YsUKBQYGEkYAAIAkD8NIY2OjVq1apZSUlJ924OOjlJQUlZeXH9c+Fi5cqGuuuUY9evRotU9DQ4Pq6urcNgAA0DV5FEZqamrkcDgUHh7u1h4eHi673X7M8RUVFVq3bp0mT5581H55eXkKCgpybVFRUZ6UCQAAOpEOvZpm4cKFGjFihBITE4/aLzs7W7W1ta5t+/btHVQhAADoaN086RwaGipfX19VVVW5tVdVVSkiIuKoY+vr6/Xyyy/rwQcfPOZxrFarrFarJ6UBAIBOyqOZEX9/f8XHx6u0tNTV1tTUpNLSUiUnJx917N///nc1NDTo97//fdsqBQAAXZJHMyOSZLPZlJ6eroSEBCUmJqqgoED19fXKyMiQJE2aNEmRkZHKy8tzG7dw4UJNmDBBffv2PTmVAwCALsHjMJKWlqY9e/YoJydHdrtdsbGxKikpcS1qrayslI+P+4TLxo0b9f777+utt946OVUDAIAuw+MwIklZWVnKyspq8b2ysrJmbUOGDJHT6WzLoQAAQBfHs2kAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYFSbwsj8+fMVHR2tgIAAJSUlqaKi4qj99+3bp1tvvVX9+/eX1WrVmWeeqeXLl7epYAAA0LV083RAcXGxbDabCgsLlZSUpIKCAqWmpmrjxo0KCwtr1r+xsVEXXnihwsLC9OqrryoyMlLbtm1TcHDwyagfAAB0ch6Hkfz8fGVmZiojI0OSVFhYqGXLlqmoqEgzZsxo1r+oqEh79+7Vhx9+KD8/P0lSdHT0iVUNAAC6DI9O0zQ2NmrVqlVKSUn5aQc+PkpJSVF5eXmLY5YuXark5GTdeuutCg8P11lnnaWHH35YDoej1eM0NDSorq7ObQMAAF2TR2GkpqZGDodD4eHhbu3h4eGy2+0tjvnmm2/06quvyuFwaPny5Zo5c6bmzZunhx56qNXj5OXlKSgoyLVFRUV5UiYAAOhE2v1qmqamJoWFhenpp59WfHy80tLSdO+996qwsLDVMdnZ2aqtrXVt27dvb+8yAQCAIR6tGQkNDZWvr6+qqqrc2quqqhQREdHimP79+8vPz0++vr6utmHDhslut6uxsVH+/v7NxlitVlmtVk9KAwAAnZRHMyP+/v6Kj49XaWmpq62pqUmlpaVKTk5uccyYMWO0adMmNTU1udq++uor9e/fv8UgAgAAvIvHp2lsNpsWLFig5557TuvXr9fNN9+s+vp619U1kyZNUnZ2tqv/zTffrL1792ratGn66quvtGzZMj388MO69dZbT96nAAAAnZbHl/ampaVpz549ysnJkd1uV2xsrEpKSlyLWisrK+Xj81PGiYqK0ptvvqnp06dr5MiRioyM1LRp0/THP/7x5H0KAADQaXkcRiQpKytLWVlZLb5XVlbWrC05OVkfffRRWw4FAAC6OJ5NAwAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMCoNoWR+fPnKzo6WgEBAUpKSlJFRUWrfZ999llZLBa3LSAgoM0FAwCArsXjMFJcXCybzabc3FytXr1aMTExSk1NVXV1datjevfurd27d7u2bdu2nVDRAACg6/A4jOTn5yszM1MZGRkaPny4CgsLFRgYqKKiolbHWCwWRUREuLbw8PATKhoAAHQdHoWRxsZGrVq1SikpKT/twMdHKSkpKi8vb3XcgQMH9Mtf/lJRUVEaP368vvjii6Mep6GhQXV1dW4bAADomjwKIzU1NXI4HM1mNsLDw2W321scM2TIEBUVFen111/XCy+8oKamJo0ePVo7duxo9Th5eXkKCgpybVFRUZ6UCQAAOpF2v5omOTlZkyZNUmxsrMaOHaslS5aoX79+euqpp1odk52drdraWte2ffv29i4TAAAY0s2TzqGhofL19VVVVZVbe1VVlSIiIo5rH35+foqLi9OmTZta7WO1WmW1Wj0pDQAAdFIezYz4+/srPj5epaWlrrampiaVlpYqOTn5uPbhcDj0+eefq3///p5VCgAAuiSPZkYkyWazKT09XQkJCUpMTFRBQYHq6+uVkZEhSZo0aZIiIyOVl5cnSXrwwQf1P//zPxo0aJD27dunuXPnatu2bZo8efLJ/SQAAKBT8jiMpKWlac+ePcrJyZHdbldsbKxKSkpci1orKyvl4/PThMt3332nzMxM2e12hYSEKD4+Xh9++KGGDx9+8j4FAADotDwOI5KUlZWlrKysFt8rKytze/3YY4/psccea8thAACAF+DZNAAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMalMYmT9/vqKjoxUQEKCkpCRVVFQc17iXX35ZFotFEyZMaMthAQBAF+RxGCkuLpbNZlNubq5Wr16tmJgYpaamqrq6+qjjtm7dqrvuukvnnHNOm4sFAABdj8dhJD8/X5mZmcrIyNDw4cNVWFiowMBAFRUVtTrG4XDo+uuv1wMPPKDTTz/9hAoGAABdi0dhpLGxUatWrVJKSspPO/DxUUpKisrLy1sd9+CDDyosLEw33XTTcR2noaFBdXV1bhsAAOiaPAojNTU1cjgcCg8Pd2sPDw+X3W5vccz777+vhQsXasGCBcd9nLy8PAUFBbm2qKgoT8oEAACdSLteTbN//35NnDhRCxYsUGho6HGPy87OVm1trWvbvn17O1YJAABM6uZJ59DQUPn6+qqqqsqtvaqqShEREc36b968WVu3btW4ceNcbU1NTUcO3K2bNm7cqDPOOKPZOKvVKqvV6klpAACgk/JoZsTf31/x8fEqLS11tTU1Nam0tFTJycnN+g8dOlSff/651qxZ49ouu+wynX/++VqzZg2nXwAAgGczI5Jks9mUnp6uhIQEJSYmqqCgQPX19crIyJAkTZo0SZGRkcrLy1NAQIDOOusst/HBwcGS1KwdAAB4J4/DSFpamvbs2aOcnBzZ7XbFxsaqpKTEtai1srJSPj7c2BUAABwfj8OIJGVlZSkrK6vF98rKyo469tlnn23LIQEAQBfFFAYAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjGpTGJk/f76io6MVEBCgpKQkVVRUtNp3yZIlSkhIUHBwsHr06KHY2Fg9//zzbS4YAAB0LR6HkeLiYtlsNuXm5mr16tWKiYlRamqqqqurW+zfp08f3XvvvSovL9fatWuVkZGhjIwMvfnmmydcPAAA6Pw8DiP5+fnKzMxURkaGhg8frsLCQgUGBqqoqKjF/uedd54uv/xyDRs2TGeccYamTZumkSNH6v333z/h4gEAQOfnURhpbGzUqlWrlJKS8tMOfHyUkpKi8vLyY453Op0qLS3Vxo0bde6557bar6GhQXV1dW4bAADomjwKIzU1NXI4HAoPD3drDw8Pl91ub3VcbW2tevbsKX9/f1166aV6/PHHdeGFF7baPy8vT0FBQa4tKirKkzIBAEAn0iFX0/Tq1Utr1qzRypUrNXv2bNlsNpWVlbXaPzs7W7W1ta5t+/btHVEmAAAwoJsnnUNDQ+Xr66uqqiq39qqqKkVERLQ6zsfHR4MGDZIkxcbGav369crLy9N5553XYn+r1Sqr1epJaQAAoJPyaGbE399f8fHxKi0tdbU1NTWptLRUycnJx72fpqYmNTQ0eHJoAADQRXk0MyJJNptN6enpSkhIUGJiogoKClRfX6+MjAxJ0qRJkxQZGam8vDxJR9Z/JCQk6IwzzlBDQ4OWL1+u559/Xn/9619P7icBAACdksdhJC0tTXv27FFOTo7sdrtiY2NVUlLiWtRaWVkpH5+fJlzq6+t1yy23aMeOHerevbuGDh2qF154QWlpaSfvUwAAgE7L4zAiSVlZWcrKymrxvZ8vTH3ooYf00EMPteUwAADAC/BsGgAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGtSmMzJ8/X9HR0QoICFBSUpIqKipa7btgwQKdc845CgkJUUhIiFJSUo7aHwAAeBePw0hxcbFsNptyc3O1evVqxcTEKDU1VdXV1S32Lysr07XXXqt3331X5eXlioqK0kUXXaSdO3eecPEAAKDz8ziM5OfnKzMzUxkZGRo+fLgKCwsVGBiooqKiFvsvXrxYt9xyi2JjYzV06FA988wzampqUmlp6QkXDwAAOj+PwkhjY6NWrVqllJSUn3bg46OUlBSVl5cf1z4OHjyow4cPq0+fPq32aWhoUF1dndsGAAC6Jo/CSE1NjRwOh8LDw93aw8PDZbfbj2sff/zjHzVgwAC3QPNzeXl5CgoKcm1RUVGelAkAADqRDr2aZs6cOXr55Zf1z3/+UwEBAa32y87OVm1trWvbvn17B1YJAAA6UjdPOoeGhsrX11dVVVVu7VVVVYqIiDjq2EcffVRz5szR22+/rZEjRx61r9VqldVq9aQ0AADQSXk0M+Lv76/4+Hi3xac/LkZNTk5uddyf/vQnzZo1SyUlJUpISGh7tQAAoMvxaGZEkmw2m9LT05WQkKDExEQVFBSovr5eGRkZkqRJkyYpMjJSeXl5kqRHHnlEOTk5evHFFxUdHe1aW9KzZ0/17NnzJH4UAADQGXkcRtLS0rRnzx7l5OTIbrcrNjZWJSUlrkWtlZWV8vH5acLlr3/9qxobG3XVVVe57Sc3N1f333//iVUPAAA6PY/DiCRlZWUpKyurxffKysrcXm/durUthwAAAF6CZ9MAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwKg2hZH58+crOjpaAQEBSkpKUkVFRat9v/jiC1155ZWKjo6WxWJRQUFBW2sFAABdkMdhpLi4WDabTbm5uVq9erViYmKUmpqq6urqFvsfPHhQp59+uubMmaOIiIgTLhgAAHQtHoeR/Px8ZWZmKiMjQ8OHD1dhYaECAwNVVFTUYv+zzz5bc+fO1TXXXCOr1XrCBQMAgK7FozDS2NioVatWKSUl5acd+PgoJSVF5eXlJ704AADQ9XXzpHNNTY0cDofCw8Pd2sPDw7Vhw4aTVlRDQ4MaGhpcr+vq6k7avgEAwKnllLyaJi8vT0FBQa4tKirKdEkAAKCdeBRGQkND5evrq6qqKrf2qqqqk7o4NTs7W7W1ta5t+/btJ23fAADg1OJRGPH391d8fLxKS0tdbU1NTSotLVVycvJJK8pqtap3795uGwAA6Jo8WjMiSTabTenp6UpISFBiYqIKCgpUX1+vjIwMSdKkSZMUGRmpvLw8SUcWvX755Zeun3fu3Kk1a9aoZ8+eGjRo0En8KAAAoDPyOIykpaVpz549ysnJkd1uV2xsrEpKSlyLWisrK+Xj89OEy65duxQXF+d6/eijj+rRRx/V2LFjVVZWduKfAAAAdGoehxFJysrKUlZWVovv/TxgREdHy+l0tuUwAADAC5ySV9MAAADvQRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFGEEQAAYBRhBAAAGEUYAQAARhFGAACAUYQRAABgFGEEAAAYRRgBAABGEUYAAIBRhBEAAGAUYQQAABhFGAEAAEYRRgAAgFFtCiPz589XdHS0AgIClJSUpIqKiqP2//vf/66hQ4cqICBAI0aM0PLly9tULAAA6Ho8DiPFxcWy2WzKzc3V6tWrFRMTo9TUVFVXV7fY/8MPP9S1116rm266SZ9++qkmTJigCRMmaN26dSdcPAAA6Pw8DiP5+fnKzMxURkaGhg8frsLCQgUGBqqoqKjF/n/+85918cUX6+6779awYcM0a9YsjRo1Sk888cQJFw8AADq/bp50bmxs1KpVq5Sdne1q8/HxUUpKisrLy1scU15eLpvN5taWmpqq1157rdXjNDQ0qKGhwfW6trZWklRXV+dJuR2uqeGg6RKOqc7iNF3C8TnFf9edRWf4Tkqd5HvJd/Kk6QzfS76TJ8ePf7edzqP/8/QojNTU1MjhcCg8PNytPTw8XBs2bGhxjN1ub7G/3W5v9Th5eXl64IEHmrVHRUV5Ui5aEGS6gOM1p9NUipOgU/y2+U56lU7x2+5E38n9+/crKKj1ej0KIx0lOzvbbTalqalJe/fuVd++fWWxWAxW1rnV1dUpKipK27dvV+/evU2XA0jie4lTD9/Jk8fpdGr//v0aMGDAUft5FEZCQ0Pl6+urqqoqt/aqqipFRES0OCYiIsKj/pJktVpltVrd2oKDgz0pFUfRu3dv/g+GUw7fS5xq+E6eHEebEfmRRwtY/f39FR8fr9LSUldbU1OTSktLlZyc3OKY5ORkt/6StGLFilb7AwAA7+LxaRqbzab09HQlJCQoMTFRBQUFqq+vV0ZGhiRp0qRJioyMVF5eniRp2rRpGjt2rObNm6dLL71UL7/8sj755BM9/fTTJ/eTAACATsnjMJKWlqY9e/YoJydHdrtdsbGxKikpcS1SrayslI/PTxMuo0eP1osvvqj77rtP99xzjwYPHqzXXntNZ5111sn7FDguVqtVubm5zU6BASbxvcSphu9kx7M4j3W9DQAAQDvi2TQAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIow4gVyc3O1bds202UAANAi7jPiBWJjY7Vu3TqNHTtWN910k6688kpu5gOjVq5cqaamJiUlJbm1f/zxx/L19VVCQoKhyuCtFi1adNT3J02a1EGVeCfCiJf49NNP9be//U0vvfSSfvjhB11zzTW68cYbdfbZZ5suDV4oMTFRf/jDH3TVVVe5tS9ZskSPPPKIPv74Y0OVwVuFhIS4vT58+LAOHjwof39/BQYGau/evYYq8w6cpvEScXFx+stf/qJdu3Zp4cKF2rFjh8aMGaORI0fqz3/+s2pra02XCC/y5ZdfatSoUc3a4+Li9OWXXxqoCN7uu+++c9sOHDigjRs36te//rVeeukl0+V1eYQRL+N0OnX48GE1NjbK6XQqJCRETzzxhKKiolRcXGy6PHgJq9WqqqqqZu27d+9Wt24ePzILaBeDBw/WnDlzNG3aNNOldHmEES+xatUqZWVlqX///po+fbri4uK0fv16vffee/r66681e/Zs3X777abLhJe46KKLlJ2d7TYjt2/fPt1zzz268MILDVYGuOvWrZt27dpluowujzUjXmDEiBHasGGDLrroImVmZmrcuHHy9fV161NTU6OwsDA1NTUZqhLeZOfOnTr33HP17bffKi4uTpK0Zs0ahYeHa8WKFYqKijJcIbzN0qVL3V47nU7t3r3bNXP8r3/9y1Bl3oEw4gVmzZqlG2+8UZGRkaZLAVzq6+u1ePFiffbZZ+revbtGjhypa6+9Vn5+fqZLgxfy8XE/UWCxWNSvXz9dcMEFmjdvnvr372+oMu/AyVkv8OPakJ/7/vvvNXfuXOXk5BioCt6uR48emjJliukyAEliVtgwZka8gK+vr3bv3q2wsDC39m+//VZhYWFyOByGKoM3Wbp0qX7729/Kz8+v2ZT4z1122WUdVBWAUwFhxAv4+PioqqpK/fr1c2t/5513lJaWpj179hiqDN7Ex8dHdrtdYWFhzabE/5vFYiEgo0PYbLbj7pufn9+OlYDTNF1YSEiILBaLLBaLzjzzTFksFtd7DodDBw4c0NSpUw1WCG/y39PgTInjVPDpp58eV7///ncn2gczI13Yc889J6fTqRtvvFEFBQUKCgpyvefv76/o6GglJycbrBDeatGiRUpLS2v2WILGxka9/PLL3Hob8DKEES/w3nvvafTo0VylgFMG65hwqtq0aZM2b96sc889V927d5fT6WRmpANwmqaLqqurU+/evSUducX2999/r++//77Fvj/2AzpKa/+C37Fjh9sMHtBRvv32W1199dV69913ZbFY9PXXX+v000/XTTfdpJCQEM2bN890iV0aYaSLCgkJcf2XZ3BwcIv/4v/xDwL/FYqOEhcX51rH9Jvf/Mbt1u8Oh0NbtmzRxRdfbLBCeKvp06fLz89PlZWVGjZsmKs9LS1NNpuNMNLOCCNd1DvvvKM+ffpIkt59913D1QBHTJgwQdKRu62mpqaqZ8+ervd+XMd05ZVXGqoO3uytt97Sm2++qdNOO82tffDgwdq2bZuhqrwHYaSLGjt2rOvngQMHKioqqtnsiNPp1Pbt2zu6NHix3NxcSVJ0dLSuueaaZgtYAVPq6+sVGBjYrH3v3r18TzsAD8rzAgMHDmzxXiJ79+7VwIEDDVQEb3fBBRe4fScrKip0xx136OmnnzZYFbzZOeeco0WLFrleWywWNTU16U9/+pPOP/98g5V5B2ZGvEBriwUPHDiggIAAAxXB21133XWaMmWKJk6cKLvdrpSUFJ111llavHix7HY7jyhAh5s7d64uuOACffLJJ2psbNQf/vAHffHFF9q7d68++OAD0+V1eYSRLuzHuwtaLBbNnDnTbQrS4XDo448/VmxsrKHq4M3WrVunxMRESdIrr7yiESNG6IMPPtBbb72lqVOnEkbQoQ4fPqzbb79db7zxhlasWKFevXrpwIEDuuKKK3TrrbfykLwOQBjpwn68u6DT6dTnn38uf39/13v+/v6KiYnRXXfdZao8eLHDhw+7zsO//fbbrmfRDB06VLt37zZZGryQn5+f1q5dq5CQEN17772my/FK3PTMC2RkZOjPf/4z9xPBKSMpKUnnn3++Lr30Ul100UX66KOPFBMTo48++khXXXWVduzYYbpEeJnp06fLarVqzpw5pkvxSoQRAB2urKxMl19+uerq6pSenq6ioiJJ0j333KMNGzZoyZIlhiuEt7ntttu0aNEiDR48WPHx8erRo4fb+zwor30RRrxAfX295syZo9LSUlVXVzd7SNk333xjqDJ4M4fDobq6OoWEhLjatm7dqsDAwGa3iQfa29GumLFYLHrnnXc6sBrvQxjxAtdee63ee+89TZw4Uf379292Zc20adMMVQYAAGHEKwQHB2vZsmUaM2aM6VLgxUaNGqXS0lKFhIS4bgvfmtWrV3dgZQBM42oaLxASEuK6NTxgyvjx411X0Px4W3gAkJgZ8QovvPCCXn/9dT333HMt3u4YAACTCCNeIC4uTps3b5bT6VR0dLT8/Pzc3mdKHABgEqdpvABT4jjVhISEtLhmxGKxKCAgQIMGDdINN9ygjIwMA9UB6GjMjADocI899phmz56t3/72t67bwldUVKikpETTp0/Xli1b9Pzzz+vxxx9XZmam4WoBtDfCiJfYt2+fXn31VW3evFl33323+vTpo9WrVys8PFyRkZGmy4OXufLKK3XhhRdq6tSpbu1PPfWU3nrrLf3jH//Q448/rqefflqff/65oSoBdBTCiBdYu3atUlJSFBQUpK1bt2rjxo06/fTTdd9996mystLtsdlAR+jZs6fWrFmjQYMGubVv2rRJsbGxOnDggDZv3qyRI0eqvr7eUJUAOoqP6QLQ/mw2m2644QZ9/fXXCggIcLVfcskl+ve//22wMnirPn366I033mjW/sYbb7guQ6+vr1evXr06ujQABrCA1QusXLlSTz31VLP2yMhI2e12AxXB282cOVM333yz3n33XdeakZUrV2r58uUqLCyUJK1YsUJjx441WSaADkIY8QJWq1V1dXXN2r/66iv169fPQEXwdpmZmRo+fLieeOIJ10PxhgwZovfee0+jR4+WJN15550mSwTQgVgz4gUmT56sb7/9Vq+88or69OmjtWvXytfXVxMmTNC5556rgoIC0yUCALwYYcQL1NbW6qqrrtInn3yi/fv3a8CAAbLb7UpOTtby5cubPSob6AgOh0Ovvfaa1q9fL0n61a9+pcsuu0y+vr6GKwPQ0QgjXuT999/X2rVrdeDAAY0aNUopKSmmS4KX2rRpky655BLt3LlTQ4YMkSRt3LhRUVFRWrZsmc444wzDFQLoSIQRAB3ukksukdPp1OLFi11Xz3z77bf6/e9/Lx8fHy1btsxwhQA6EmGki/rLX/5y3H1vv/32dqwEaK5Hjx766KOPNGLECLf2zz77TGPGjNGBAwcMVQbABK6m6aIee+wxt9d79uzRwYMHFRwcLOnIHVkDAwMVFhZGGEGHs1qt2r9/f7P2AwcOyN/f30BFAEzipmdd1JYtW1zb7NmzFRsbq/Xr12vv3r3au3ev1q9fr1GjRmnWrFmmS4UX+t3vfqcpU6bo448/ltPplNPp1EcffaSpU6fqsssuM10egA7GaRovcMYZZ+jVV19VXFycW/uqVat01VVXacuWLYYqg7fat2+f0tPT9cYbb8jPz0+SdPjwYY0fP15/+9vfXDN4ALwDp2m8wO7du/XDDz80a3c4HKqqqjJQEbxdcHCwXn/9dW3atMl1ae+wYcOaPasGgHdgZsQLjBs3Tjt37tQzzzyjUaNGSToyKzJlyhRFRkZq6dKlhiuEN7DZbMfdNz8/vx0rAXCqYWbECxQVFSk9PV0JCQluU+IXX3yxFixYYLg6eItPP/30uPpZLJZ2rgTAqYaZES/y9ddfu6bEhw4dqjPPPNNwRQAAEEa6LJvNplmzZqlHjx7HnB5nShwAYBKnabqoTz/9VIcPH3b93BqmxAEApjEzAgAAjOKmZwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACj/j+0v31x3yuy0wAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["np.random.seed(0)\n","#hidden_layer_sizes=[(50,),(100,),(50,50),(50,100),(100,50),(100,100)]\n","#activation=['identity','logistic','relu']\n","#solver=['sgd','adam']\n","#learning_rate_init=[0.005,0.05,0.5]\n","#random_state=[1,2,3]\n","\n","errors=np.zeros((3,2))\n","\n","act_functions=['identity','logistic','relu']\n","for i,a in enumerate(act_functions):\n","  mlp = MLPClassifier(hidden_layer_sizes=50, max_iter=3000, activation=a,\n","                    learning_rate_init=0.005, learning_rate='constant',\n","                    alpha=0, tol=0, solver='adam', random_state=1)\n","  mlp.fit(X_train, y_train)\n","  print(f\"Train accuracy for {a}: {mlp.score(X_train, y_train)}\")\n","  print(f\"Test accuracy for {a}: {mlp.score(X_test, y_test)}\")\n","  errors[i,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","pd.DataFrame(errors,columns=['Train Error','Test Error'],index=act_functions).plot(kind='bar')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":159673,"status":"ok","timestamp":1746218472774,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"zHgkVKeToO9P","outputId":"34f175b8-58e2-4bdb-ad4f-deb627b007df"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:546: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL: .\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"name":"stdout","output_type":"stream","text":["Train accuracy for solver=lbfgs, learning_rate=0.0005: 0.7591830466830467\n","Test accuracy for solver=lbfgs, learning_rate=0.0005: 0.7637737239727289\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:546: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL: .\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"name":"stdout","output_type":"stream","text":["Train accuracy for solver=lbfgs, learning_rate=0.001: 0.7591830466830467\n","Test accuracy for solver=lbfgs, learning_rate=0.001: 0.7637737239727289\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:546: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL: .\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"name":"stdout","output_type":"stream","text":["Train accuracy for solver=lbfgs, learning_rate=0.005: 0.7591830466830467\n","Test accuracy for solver=lbfgs, learning_rate=0.005: 0.7637737239727289\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:546: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL: .\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"name":"stdout","output_type":"stream","text":["Train accuracy for solver=lbfgs, learning_rate=0.01: 0.7591830466830467\n","Test accuracy for solver=lbfgs, learning_rate=0.01: 0.7637737239727289\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:546: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL: .\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"name":"stdout","output_type":"stream","text":["Train accuracy for solver=lbfgs, learning_rate=0.05: 0.7591830466830467\n","Test accuracy for solver=lbfgs, learning_rate=0.05: 0.7637737239727289\n","Train accuracy for solver=sgd, learning_rate=0.0005: 0.7595208845208845\n","Test accuracy for solver=sgd, learning_rate=0.0005: 0.7643879368589153\n","Train accuracy for solver=sgd, learning_rate=0.001: 0.7596437346437347\n","Test accuracy for solver=sgd, learning_rate=0.001: 0.7645722007247712\n","Train accuracy for solver=sgd, learning_rate=0.005: 0.7591830466830467\n","Test accuracy for solver=sgd, learning_rate=0.005: 0.7637737239727289\n","Train accuracy for solver=sgd, learning_rate=0.01: 0.7591830466830467\n","Test accuracy for solver=sgd, learning_rate=0.01: 0.7637737239727289\n","Train accuracy for solver=sgd, learning_rate=0.05: 0.7591830466830467\n","Test accuracy for solver=sgd, learning_rate=0.05: 0.7637737239727289\n","Train accuracy for solver=adam, learning_rate=0.0005: 0.7896805896805896\n","Test accuracy for solver=adam, learning_rate=0.0005: 0.7894478226153184\n","Train accuracy for solver=adam, learning_rate=0.001: 0.7991093366093366\n","Test accuracy for solver=adam, learning_rate=0.001: 0.8005036545666728\n","Train accuracy for solver=adam, learning_rate=0.005: 0.8452702702702702\n","Test accuracy for solver=adam, learning_rate=0.005: 0.8454026165468952\n","Train accuracy for solver=adam, learning_rate=0.01: 0.8093058968058968\n","Test accuracy for solver=adam, learning_rate=0.01: 0.810392482034273\n","Train accuracy for solver=adam, learning_rate=0.05: 0.7671068796068796\n","Test accuracy for solver=adam, learning_rate=0.05: 0.7710828573183466\n"]},{"data":{"text/plain":["<Axes: >"]},"execution_count":18,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["np.random.seed(0)\n","#hidden_layer_sizes=\n","#activation=['logistic','relu']\n","#solver=['lbfgs','sgd','adam']\n","#learning_rate_init=0.0005,0.001,0.005,0.01,0.05]\n","#random_state=range(1,11)\n","\n","solver=['lbfgs','sgd','adam']\n","learning_rate_init=[0.0005,0.001,0.005,0.01,0.05]\n","errors=np.zeros((len(solver)*len(learning_rate_init),2))\n","for i,s in enumerate(solver):\n","  for j,l in enumerate(learning_rate_init):\n","    mlp = MLPClassifier(hidden_layer_sizes=50, max_iter=10000, activation='relu',\n","                    learning_rate_init=l, learning_rate='constant',\n","                    alpha=0, tol=0, solver=s, random_state=1)\n","    mlp.fit(X_train, y_train)\n","    print(f\"Train accuracy for solver={s}, learning_rate={l}: {mlp.score(X_train, y_train)}\")\n","    print(f\"Test accuracy for solver={s}, learning_rate={l}: {mlp.score(X_test, y_test)}\")\n","    errors[len(learning_rate_init)*i+j,:]=[mlp.score(X_train, y_train),mlp.score(X_test, y_test)]\n","\n","indices=[f'solver={s}, learning_rate={l}' for s in solver for l in learning_rate_init]\n","pd.DataFrame(errors,columns=['Train Error','Test Error'],index=indices).plot(kind='bar')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4891201,"status":"ok","timestamp":1746281598169,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"SWl1P89wsqyH","outputId":"cec2a4e7-fd20-4c25-bea7-ba67b16e7212"},"outputs":[{"name":"stdout","output_type":"stream","text":["(50,) logistic sgd 0.0005 1\n","Test accuracy: 0.7637737239727289\n","\n","(50,) logistic sgd 0.0005 2\n"]},{"name":"stderr","output_type":"stream","text":["<ipython-input-14-018ada2ca21a>:29: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '(50,),logistic,sgd,0.0005,1' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n","  errors.iloc[i,:]=[f'{h},{a},{s},{l},{r}',mlp.score(X_test, y_test)]\n"]},{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.7637737239727289\n","\n","(50,) logistic sgd 0.0005 3\n","Test accuracy: 0.7637737239727289\n","\n","(50,) logistic sgd 0.001 1\n","Test accuracy: 0.7637737239727289\n","\n","(50,) logistic sgd 0.001 2\n","Test accuracy: 0.7662305755174743\n","\n","(50,) logistic sgd 0.001 3\n","Test accuracy: 0.7637737239727289\n","\n","(50,) logistic sgd 0.005 1\n","Test accuracy: 0.7685645844849825\n","\n","(50,) logistic sgd 0.005 2\n","Test accuracy: 0.766107732940237\n","\n","(50,) logistic sgd 0.005 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) logistic sgd 0.01 1\n","Test accuracy: 0.764940728456483\n","\n","(50,) logistic sgd 0.01 2\n","Test accuracy: 0.766783367115042\n","\n","(50,) logistic sgd 0.01 3\n","Test accuracy: 0.7682574780418893\n","\n","(50,) logistic sgd 0.05 1\n","Test accuracy: 0.766783367115042\n","\n","(50,) logistic sgd 0.05 2\n","Test accuracy: 0.7659234690743811\n","\n","(50,) logistic sgd 0.05 3\n","Test accuracy: 0.7666605245378048\n","\n","(50,) logistic adam 0.0005 1\n","Test accuracy: 0.7929488360665807\n","\n","(50,) logistic adam 0.0005 2\n","Test accuracy: 0.7657392052085252\n","\n","(50,) logistic adam 0.0005 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) logistic adam 0.001 1\n","Test accuracy: 0.7869295497819544\n","\n","(50,) logistic adam 0.001 2\n","Test accuracy: 0.7665376819605675\n","\n","(50,) logistic adam 0.001 3\n","Test accuracy: 0.7666605245378048\n","\n","(50,) logistic adam 0.005 1\n","Test accuracy: 0.7662305755174743\n","\n","(50,) logistic adam 0.005 2\n","Test accuracy: 0.764940728456483\n","\n","(50,) logistic adam 0.005 3\n","Test accuracy: 0.7666605245378048\n","\n","(50,) logistic adam 0.01 1\n","Test accuracy: 0.7662305755174743\n","\n","(50,) logistic adam 0.01 2\n","Test accuracy: 0.7659234690743811\n","\n","(50,) logistic adam 0.01 3\n","Test accuracy: 0.7666605245378048\n","\n","(50,) logistic adam 0.05 1\n","Test accuracy: 0.7662305755174743\n","\n","(50,) logistic adam 0.05 2\n","Test accuracy: 0.7660463116516184\n","\n","(50,) logistic adam 0.05 3\n","Test accuracy: 0.7666605245378048\n","\n","(50,) relu sgd 0.0005 1\n","Test accuracy: 0.7643879368589153\n","\n","(50,) relu sgd 0.0005 2\n","Test accuracy: 0.765616362631288\n","\n","(50,) relu sgd 0.0005 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) relu sgd 0.001 1\n","Test accuracy: 0.7643265155702966\n","\n","(50,) relu sgd 0.001 2\n","Test accuracy: 0.764265094281678\n","\n","(50,) relu sgd 0.001 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) relu sgd 0.005 1\n","Test accuracy: 0.7646336220133898\n","\n","(50,) relu sgd 0.005 2\n","Test accuracy: 0.7637737239727289\n","\n","(50,) relu sgd 0.005 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) relu sgd 0.01 1\n","Test accuracy: 0.7637737239727289\n","\n","(50,) relu sgd 0.01 2\n","Test accuracy: 0.7637737239727289\n","\n","(50,) relu sgd 0.01 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) relu sgd 0.05 1\n","Test accuracy: 0.7637737239727289\n","\n","(50,) relu sgd 0.05 2\n","Test accuracy: 0.7637737239727289\n","\n","(50,) relu sgd 0.05 3\n","Test accuracy: 0.7648178858792457\n","\n","(50,) relu adam 0.0005 1\n","Test accuracy: 0.800135126834961\n","\n","(50,) relu adam 0.0005 2\n","Test accuracy: 0.8069528898716295\n","\n","(50,) relu adam 0.0005 3\n","Test accuracy: 0.8080584730667649\n","\n","(50,) relu adam 0.001 1\n","Test accuracy: 0.810392482034273\n","\n","(50,) relu adam 0.001 2\n","Test accuracy: 0.7841041705054972\n","\n","(50,) relu adam 0.001 3\n","Test accuracy: 0.7974940114243597\n","\n","(50,) relu adam 0.005 1\n","Test accuracy: 0.8231066887783306\n","\n","(50,) relu adam 0.005 2\n","Test accuracy: 0.8334868865548799\n","\n","(50,) relu adam 0.005 3\n","Test accuracy: 0.8221853694490511\n","\n","(50,) relu adam 0.01 1\n","Test accuracy: 0.8135249677538234\n","\n","(50,) relu adam 0.01 2\n","Test accuracy: 0.8134021251765862\n","\n","(50,) relu adam 0.01 3\n","Test accuracy: 0.8451569313924207\n","\n","(50,) relu adam 0.05 1\n","Test accuracy: 0.7791904674160064\n","\n","(50,) relu adam 0.05 2\n","Test accuracy: 0.7645107794361525\n","\n","(50,) relu adam 0.05 3\n","Test accuracy: 0.768994533505313\n","\n","(100,) logistic sgd 0.0005 1\n","Test accuracy: 0.764265094281678\n","\n","(100,) logistic sgd 0.0005 2\n","Test accuracy: 0.7637737239727289\n","\n","(100,) logistic sgd 0.0005 3\n","Test accuracy: 0.7670290522695166\n","\n","(100,) logistic sgd 0.001 1\n","Test accuracy: 0.7691787973711689\n","\n","(100,) logistic sgd 0.001 2\n","Test accuracy: 0.7638351452613475\n","\n","(100,) logistic sgd 0.001 3\n","Test accuracy: 0.7637737239727289\n","\n","(100,) logistic sgd 0.005 1\n","Test accuracy: 0.769670167680118\n","\n","(100,) logistic sgd 0.005 2\n","Test accuracy: 0.7680117928874147\n","\n","(100,) logistic sgd 0.005 3\n","Test accuracy: 0.7661691542288557\n","\n","(100,) logistic sgd 0.01 1\n","Test accuracy: 0.7665376819605675\n","\n","(100,) logistic sgd 0.01 2\n","Test accuracy: 0.7656777839199066\n","\n","(100,) logistic sgd 0.01 3\n","Test accuracy: 0.7680117928874147\n","\n","(100,) logistic sgd 0.05 1\n","Test accuracy: 0.7681960567532706\n","\n","(100,) logistic sgd 0.05 2\n","Test accuracy: 0.7691787973711689\n","\n","(100,) logistic sgd 0.05 3\n","Test accuracy: 0.7660463116516184\n","\n","(100,) logistic adam 0.0005 1\n","Test accuracy: 0.7694244825256434\n","\n","(100,) logistic adam 0.0005 2\n","Test accuracy: 0.7670290522695166\n","\n","(100,) logistic adam 0.0005 3\n","Test accuracy: 0.7654935200540507\n","\n","(100,) logistic adam 0.001 1\n","Test accuracy: 0.768134635464652\n","\n","(100,) logistic adam 0.001 2\n","Test accuracy: 0.7739082365948038\n","\n","(100,) logistic adam 0.001 3\n","Test accuracy: 0.7654935200540507\n","\n","(100,) logistic adam 0.005 1\n","Test accuracy: 0.768134635464652\n","\n","(100,) logistic adam 0.005 2\n","Test accuracy: 0.7705914870093975\n","\n","(100,) logistic adam 0.005 3\n","Test accuracy: 0.7660463116516184\n","\n","(100,) logistic adam 0.01 1\n","Test accuracy: 0.765616362631288\n","\n","(100,) logistic adam 0.01 2\n","Test accuracy: 0.7682574780418893\n","\n","(100,) logistic adam 0.01 3\n","Test accuracy: 0.7679503715987961\n","\n","(100,) logistic adam 0.05 1\n","Test accuracy: 0.768134635464652\n","\n","(100,) logistic adam 0.05 2\n","Test accuracy: 0.7658620477857625\n","\n","(100,) logistic adam 0.05 3\n","Test accuracy: 0.7660463116516184\n","\n","(100,) relu sgd 0.0005 1\n","Test accuracy: 0.7652478348995762\n","\n","(100,) relu sgd 0.0005 2\n","Test accuracy: 0.7658620477857625\n","\n","(100,) relu sgd 0.0005 3\n","Test accuracy: 0.7653706774768134\n","\n","(100,) relu sgd 0.001 1\n","Test accuracy: 0.7662305755174743\n","\n","(100,) relu sgd 0.001 2\n","Test accuracy: 0.7641422517044407\n","\n","(100,) relu sgd 0.001 3\n","Test accuracy: 0.7660463116516184\n","\n","(100,) relu sgd 0.005 1\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu sgd 0.005 2\n","Test accuracy: 0.7638965665499662\n","\n","(100,) relu sgd 0.005 3\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu sgd 0.01 1\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu sgd 0.01 2\n","Test accuracy: 0.7638965665499662\n","\n","(100,) relu sgd 0.01 3\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu sgd 0.05 1\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu sgd 0.05 2\n","Test accuracy: 0.7643879368589153\n","\n","(100,) relu sgd 0.05 3\n","Test accuracy: 0.7637737239727289\n","\n","(100,) relu adam 0.0005 1\n","Test accuracy: 0.2370247527793133\n","\n","(100,) relu adam 0.0005 2\n","Test accuracy: 0.26085621276334375\n","\n","(100,) relu adam 0.0005 3\n","Test accuracy: 0.7815244763835145\n","\n","(100,) relu adam 0.001 1\n","Test accuracy: 0.7993366500829188\n","\n","(100,) relu adam 0.001 2\n","Test accuracy: 0.7457158651188502\n","\n","(100,) relu adam 0.001 3\n","Test accuracy: 0.8041275105951723\n","\n","(100,) relu adam 0.005 1\n","Test accuracy: 0.8260549106320251\n","\n","(100,) relu adam 0.005 2\n","Test accuracy: 0.8086112646643326\n","\n","(100,) relu adam 0.005 3\n","Test accuracy: 0.828757447331245\n","\n","(100,) relu adam 0.01 1\n","Test accuracy: 0.8161046618758061\n","\n","(100,) relu adam 0.01 2\n","Test accuracy: 0.8359437380996253\n","\n","(100,) relu adam 0.01 3\n","Test accuracy: 0.8094711627049935\n","\n","(100,) relu adam 0.05 1\n","Test accuracy: 0.7659234690743811\n","\n","(100,) relu adam 0.05 2\n","Test accuracy: 0.7705300657207789\n","\n","(100,) relu adam 0.05 3\n","Test accuracy: 0.7657392052085252\n","\n","(50, 50) logistic sgd 0.0005 1\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.0005 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.0005 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.001 1\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.001 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.001 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.005 1\n","Test accuracy: 0.7647564645906271\n","\n","(50, 50) logistic sgd 0.005 2\n","Test accuracy: 0.7691787973711689\n","\n","(50, 50) logistic sgd 0.005 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.01 1\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.01 2\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) logistic sgd 0.01 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic sgd 0.05 1\n","Test accuracy: 0.7653706774768134\n","\n","(50, 50) logistic sgd 0.05 2\n","Test accuracy: 0.7681960567532706\n","\n","(50, 50) logistic sgd 0.05 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) logistic adam 0.0005 1\n","Test accuracy: 0.7659234690743811\n","\n","(50, 50) logistic adam 0.0005 2\n","Test accuracy: 0.7682574780418893\n","\n","(50, 50) logistic adam 0.0005 3\n","Test accuracy: 0.7666605245378048\n","\n","(50, 50) logistic adam 0.001 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) logistic adam 0.001 2\n","Test accuracy: 0.764940728456483\n","\n","(50, 50) logistic adam 0.001 3\n","Test accuracy: 0.7666605245378048\n","\n","(50, 50) logistic adam 0.005 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) logistic adam 0.005 2\n","Test accuracy: 0.764940728456483\n","\n","(50, 50) logistic adam 0.005 3\n","Test accuracy: 0.7666605245378048\n","\n","(50, 50) logistic adam 0.01 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) logistic adam 0.01 2\n","Test accuracy: 0.768134635464652\n","\n","(50, 50) logistic adam 0.01 3\n","Test accuracy: 0.7666605245378048\n","\n","(50, 50) logistic adam 0.05 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) logistic adam 0.05 2\n","Test accuracy: 0.764940728456483\n","\n","(50, 50) logistic adam 0.05 3\n","Test accuracy: 0.7666605245378048\n","\n","(50, 50) relu sgd 0.0005 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) relu sgd 0.0005 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.0005 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.001 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) relu sgd 0.001 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.001 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.005 1\n","Test accuracy: 0.7640808304158221\n","\n","(50, 50) relu sgd 0.005 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.005 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.01 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) relu sgd 0.01 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.01 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.05 1\n","Test accuracy: 0.7662305755174743\n","\n","(50, 50) relu sgd 0.05 2\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu sgd 0.05 3\n","Test accuracy: 0.7637737239727289\n","\n","(50, 50) relu adam 0.0005 1\n","Test accuracy: 0.25225723235673486\n","\n","(50, 50) relu adam 0.0005 2\n","Test accuracy: 0.7925803083348688\n","\n","(50, 50) relu adam 0.0005 3\n","Test accuracy: 0.6187580615441312\n","\n","(50, 50) relu adam 0.001 1\n","Test accuracy: 0.814937657392052\n","\n","(50, 50) relu adam 0.001 2\n","Test accuracy: 0.8315214053190836\n","\n","(50, 50) relu adam 0.001 3\n","Test accuracy: 0.7475585037774093\n","\n","(50, 50) relu adam 0.005 1\n","Test accuracy: 0.23696333149069468\n","\n","(50, 50) relu adam 0.005 2\n","Test accuracy: 0.8011792887414778\n","\n","(50, 50) relu adam 0.005 3\n","Test accuracy: 0.8036361402862232\n","\n","(50, 50) relu adam 0.01 1\n","Test accuracy: 0.7999508629691051\n","\n","(50, 50) relu adam 0.01 2\n","Test accuracy: 0.7857011240095817\n","\n","(50, 50) relu adam 0.01 3\n","Test accuracy: 0.8009950248756219\n","\n","(50, 50) relu adam 0.05 1\n","Test accuracy: 0.7753209262330324\n","\n","(50, 50) relu adam 0.05 2\n","Test accuracy: 0.7646336220133898\n","\n","(50, 50) relu adam 0.05 3\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.0005 1\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.0005 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.0005 3\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.001 1\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.001 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.001 3\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.005 1\n","Test accuracy: 0.7680117928874147\n","\n","(100, 100) logistic sgd 0.005 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.005 3\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.01 1\n","Test accuracy: 0.7653706774768134\n","\n","(100, 100) logistic sgd 0.01 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) logistic sgd 0.01 3\n","Test accuracy: 0.7660463116516184\n","\n","(100, 100) logistic sgd 0.05 1\n","Test accuracy: 0.768134635464652\n","\n","(100, 100) logistic sgd 0.05 2\n","Test accuracy: 0.7662305755174743\n","\n","(100, 100) logistic sgd 0.05 3\n","Test accuracy: 0.7680117928874147\n","\n","(100, 100) logistic adam 0.0005 1\n","Test accuracy: 0.768134635464652\n","\n","(100, 100) logistic adam 0.0005 2\n","Test accuracy: 0.7696087463914993\n","\n","(100, 100) logistic adam 0.0005 3\n","Test accuracy: 0.7954056876113261\n","\n","(100, 100) logistic adam 0.001 1\n","Test accuracy: 0.7680732141760334\n","\n","(100, 100) logistic adam 0.001 2\n","Test accuracy: 0.7658620477857625\n","\n","(100, 100) logistic adam 0.001 3\n","Test accuracy: 0.7680117928874147\n","\n","(100, 100) logistic adam 0.005 1\n","Test accuracy: 0.7704686444321602\n","\n","(100, 100) logistic adam 0.005 2\n","Test accuracy: 0.766783367115042\n","\n","(100, 100) logistic adam 0.005 3\n","Test accuracy: 0.7662305755174743\n","\n","(100, 100) logistic adam 0.01 1\n","Test accuracy: 0.7666605245378048\n","\n","(100, 100) logistic adam 0.01 2\n","Test accuracy: 0.7658620477857625\n","\n","(100, 100) logistic adam 0.01 3\n","Test accuracy: 0.7665376819605675\n","\n","(100, 100) logistic adam 0.05 1\n","Test accuracy: 0.7653706774768134\n","\n","(100, 100) logistic adam 0.05 2\n","Test accuracy: 0.7658620477857625\n","\n","(100, 100) logistic adam 0.05 3\n","Test accuracy: 0.7660463116516184\n","\n","(100, 100) relu sgd 0.0005 1\n","Test accuracy: 0.7652478348995762\n","\n","(100, 100) relu sgd 0.0005 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) relu sgd 0.0005 3\n","Test accuracy: 0.764265094281678\n","\n","(100, 100) relu sgd 0.001 1\n","Test accuracy: 0.7652478348995762\n","\n","(100, 100) relu sgd 0.001 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) relu sgd 0.001 3\n","Test accuracy: 0.764265094281678\n","\n","(100, 100) relu sgd 0.005 1\n","Test accuracy: 0.7652478348995762\n","\n","(100, 100) relu sgd 0.005 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) relu sgd 0.005 3\n","Test accuracy: 0.7646950433020084\n","\n","(100, 100) relu sgd 0.01 1\n","Test accuracy: 0.7652478348995762\n","\n","(100, 100) relu sgd 0.01 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) relu sgd 0.01 3\n","Test accuracy: 0.7646950433020084\n","\n","(100, 100) relu sgd 0.05 1\n","Test accuracy: 0.7652478348995762\n","\n","(100, 100) relu sgd 0.05 2\n","Test accuracy: 0.7637737239727289\n","\n","(100, 100) relu sgd 0.05 3\n","Test accuracy: 0.7646950433020084\n","\n","(100, 100) relu adam 0.0005 1\n","Test accuracy: 0.8000122842577237\n","\n","(100, 100) relu adam 0.0005 2\n","Test accuracy: 0.7656777839199066\n","\n","(100, 100) relu adam 0.0005 3\n","Test accuracy: 0.786990971070573\n","\n","(100, 100) relu adam 0.001 1\n","Test accuracy: 0.23634911860450833\n","\n","(100, 100) relu adam 0.001 2\n","Test accuracy: 0.8362508445427185\n","\n","(100, 100) relu adam 0.001 3\n","Test accuracy: 0.8270990725385419\n","\n","(100, 100) relu adam 0.005 1\n","Test accuracy: 0.8070757324488668\n","\n","(100, 100) relu adam 0.005 2\n","Test accuracy: 0.8036361402862232\n","\n","(100, 100) relu adam 0.005 3\n","Test accuracy: 0.8052330937903077\n","\n","(100, 100) relu adam 0.01 1\n","Test accuracy: 0.8020391867821387\n","\n","(100, 100) relu adam 0.01 2\n","Test accuracy: 0.7983539094650206\n","\n","(100, 100) relu adam 0.01 3\n","Test accuracy: 0.7999508629691051\n","\n","(100, 100) relu adam 0.05 1\n","Test accuracy: 0.7659234690743811\n","\n","(100, 100) relu adam 0.05 2\n","Test accuracy: 0.7641422517044407\n","\n","(100, 100) relu adam 0.05 3\n","Test accuracy: 0.7660463116516184\n","\n","Execution time: 4891.080434083939 seconds\n"]},{"data":{"text/plain":["0.8451569313924207"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["np.random.seed(0)\n","#hidden_layer_sizes=\n","#activation=['logistic','relu']\n","#solver=['lbfgs','sgd','adam']\n","#learning_rate_init=0.0005,0.001,0.005,0.01,0.05]\n","#random_state=range(1,11)\n","\n","start_time = time.time()\n","\n","hidden_layer_sizes=[(50,),(100,),(50,50),(100,100)]\n","activation=['logistic','relu']\n","solver=['sgd','adam']\n","learning_rate_init=[0.0005,0.001,0.005,0.01,0.05]\n","random_state=range(1,4)\n","errors=pd.DataFrame(np.zeros((len(hidden_layer_sizes)*len(activation)*len(solver)*len(learning_rate_init)*len(random_state),2)))\n","i=0\n","for h in hidden_layer_sizes:\n","  for a in activation:\n","    for s in solver:\n","      for l in learning_rate_init:\n","        for r in random_state:\n","          print(h,a,s,l,r)\n","          mlp = MLPClassifier(hidden_layer_sizes=h, max_iter=5000, activation=a,\n","                      learning_rate_init=l, learning_rate='constant',\n","                      alpha=0, tol=0, solver=s, random_state=r)\n","          mlp.fit(X_train, y_train)\n","          print(f\"Test accuracy: {mlp.score(X_test, y_test)}\")\n","          print('')\n","          errors.iloc[i,:]=[f'{h},{a},{s},{l},{r}',mlp.score(X_test, y_test)]\n","          i=i+1\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")\n","\n","np.max(errors.iloc[:,1])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1746282840710,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"KAPIg0xSf5TL","outputId":"4c1f1d20-44b8-45fc-f92f-efca8a73dca9"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>56</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(50,),relu,adam,0.01,3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.845157</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"],"text/plain":["0    (50,),relu,adam,0.01,3\n","1                  0.845157\n","Name: 56, dtype: object"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["errors.iloc[np.argmax(errors.iloc[:,1]),:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FgnTNwKAxnkM"},"outputs":[],"source":["params={\n","'hidden_layer_sizes':[(50,),(100,),(50,50),(50,100),(100,50),(100,100)],\n","'activation':['identity','logistic','relu'],\n","'solver':['sgd','adam'],\n","'learning_rate_init':[0.0005,0.001,0.005,0.01,0.05],\n","'random_state':[1,2,3]\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"LMWkyTSMzMs_","outputId":"18383c95-d0f7-438b-ee2e-0c7f412880a2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 2 folds for each of 540 candidates, totalling 1080 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:335: RuntimeWarning: overflow encountered in scalar add\n","  values += np.dot(s, s)\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:335: RuntimeWarning: overflow encountered in scalar add\n","  values += np.dot(s, s)\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n","180 fits failed out of a total of 1080.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","180 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 754, in fit\n","    return self._fit(X, y, incremental=False)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 496, in _fit\n","    raise ValueError(\n","ValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [       nan 0.77616708        nan 0.79545455        nan 0.5352887\n","        nan 0.5254914         nan 0.77232801        nan 0.78197174\n","        nan 0.77487715        nan 0.7544226         nan 0.78829853\n","        nan 0.79883292        nan 0.814957          nan 0.81068796\n","        nan 0.51136364        nan 0.78062039        nan 0.79090909\n","        nan 0.68461302        nan 0.75328624        nan 0.69766585\n","        nan 0.77601351        nan 0.79444103        nan 0.78203317\n","        nan 0.79023342        nan 0.76676904        nan 0.79824939\n","        nan 0.5205774         nan 0.77321867        nan 0.77969902\n","        nan 0.785043          nan 0.78510442        nan 0.5154484\n","        nan 0.7865172         nan 0.70027641        nan 0.79468673\n","        nan 0.79401106        nan 0.79158477        nan 0.51179361\n","        nan 0.81025799        nan 0.78409091        nan 0.77146806\n","        nan 0.78433661        nan 0.77371007        nan 0.7904484\n","        nan 0.79846437        nan 0.78160319        nan 0.79173833\n","        nan 0.24081695        nan 0.78894349        nan 0.79477887\n","        nan 0.78906634        nan 0.51022727        nan 0.77767199\n","        nan 0.79256757        nan 0.65089066        nan 0.79161548\n","        nan 0.78009828        nan 0.78903563        nan 0.78111179\n","        nan 0.73154177        nan 0.77739558        nan 0.77487715\n","        nan 0.78829853        nan 0.5107801         nan 0.51603194\n","        nan 0.79588452        nan 0.78891278        nan 0.51081081\n","        nan 0.785043          nan 0.79560811        nan 0.80700246\n","        nan 0.77367936        nan 0.78992629        nan 0.79272113\n","        nan 0.79735872        nan 0.7970516         nan 0.79339681\n","        nan 0.78931204        nan 0.47976044        nan 0.78369165\n","        nan 0.51105651        nan 0.76191646        nan 0.5125\n","        nan 0.79735872        nan 0.76065725        nan 0.80052211\n","        nan 0.77103808        nan 0.7867629         nan 0.79465602\n","        nan 0.77466216        nan 0.50128993        nan 0.72693489\n"," 0.75918305 0.75961302 0.75918305 0.76240786 0.75918305 0.75988943\n"," 0.75918305 0.76369779 0.75918305 0.76498771 0.75918305 0.76317568\n"," 0.76136364 0.7620086  0.7597973  0.75918305 0.76216216 0.75918305\n"," 0.76314496 0.75918305 0.76320639 0.76237715 0.76277641 0.75988943\n"," 0.76560197 0.75952088 0.76302211 0.75942875 0.76382064 0.75942875\n"," 0.75924447 0.7627457  0.75918305 0.77337224 0.75918305 0.76317568\n"," 0.75936732 0.76630835 0.75918305 0.76357494 0.75918305 0.76041155\n"," 0.76317568 0.76756757 0.76074939 0.75918305 0.76277641 0.75970516\n"," 0.76194717 0.76213145 0.76148649 0.76087224 0.76191646 0.76213145\n"," 0.76388206 0.75976658 0.76357494 0.75967445 0.76314496 0.76280713\n"," 0.75918305 0.7634828  0.75918305 0.76901106 0.75918305 0.77481572\n"," 0.75918305 0.76139435 0.75918305 0.76164005 0.75918305 0.76022727\n"," 0.75918305 0.75918305 0.75918305 0.75918305 0.75918305 0.75918305\n"," 0.75918305 0.75918305 0.75918305 0.76286855 0.75918305 0.75918305\n"," 0.76560197 0.75918305 0.7610258  0.75918305 0.76388206 0.75918305\n"," 0.75918305 0.7632371  0.75918305 0.76289926 0.75918305 0.76145577\n"," 0.75918305 0.76554054 0.75918305 0.76007371 0.75918305 0.76354423\n"," 0.75918305 0.7605344  0.75918305 0.76243857 0.75918305 0.76154791\n"," 0.75933661 0.75918305 0.76019656 0.75918305 0.75918305 0.75918305\n"," 0.76560197 0.75918305 0.76145577 0.75918305 0.76210074 0.75918305\n"," 0.75918305 0.76609337 0.75918305 0.76262285 0.75918305 0.77539926\n"," 0.75918305 0.76609337 0.75918305 0.76280713 0.75918305 0.76572482\n"," 0.75918305 0.76449631 0.75918305 0.76179361 0.75918305 0.76621622\n"," 0.75918305 0.76121007 0.75918305 0.75918305 0.75918305 0.76173219\n"," 0.76105651 0.75918305 0.76056511 0.75918305 0.76105651 0.75918305\n"," 0.75918305 0.76468059 0.75918305 0.76308354 0.75918305 0.78246314\n"," 0.75918305 0.76910319 0.75918305 0.76504914 0.75918305 0.76253071\n"," 0.75918305 0.76253071 0.75918305 0.75942875 0.75918305 0.75918305\n"," 0.75985872 0.75918305 0.75918305 0.75918305 0.76007371 0.75918305\n"," 0.76124079 0.75918305 0.7632371  0.75918305 0.76237715 0.75918305\n"," 0.76185504 0.51839681 0.76213145 0.79846437 0.75970516 0.51937961\n"," 0.76296069 0.78925061 0.75942875 0.79170762 0.75942875 0.78636364\n"," 0.75918305 0.75635749 0.75942875 0.79941646 0.75970516 0.51913391\n"," 0.75921376 0.78734644 0.75942875 0.83931204 0.75970516 0.81038084\n"," 0.75918305 0.79717445 0.75942875 0.79527027 0.75970516 0.78197174\n"," 0.76246929 0.78811425 0.76173219 0.54275184 0.76216216 0.79496314\n"," 0.76179361 0.50786241 0.76105651 0.7870086  0.76059582 0.61615479\n"," 0.7593059  0.84600737 0.76121007 0.80104423 0.75958231 0.52177518\n"," 0.75918305 0.82469287 0.75933661 0.8375     0.75958231 0.82705774\n"," 0.75918305 0.78461302 0.75933661 0.79103194 0.75967445 0.79410319\n"," 0.76188575 0.78964988 0.75949017 0.36277641 0.75918305 0.77238943\n"," 0.76188575 0.51698403 0.75949017 0.78117322 0.75918305 0.52628993\n"," 0.76305283 0.8029484  0.75949017 0.79938575 0.75918305 0.56087224\n"," 0.76311425 0.80426904 0.75973587 0.79447174 0.75918305 0.80340909\n"," 0.76191646 0.76382064 0.75945946 0.76292998 0.75918305 0.77509214\n"," 0.50006143 0.78796069 0.75949017 0.79140049 0.50085995 0.79265971\n"," 0.75918305 0.51679975 0.75949017 0.78934275 0.7602887  0.78611794\n"," 0.75945946 0.80371622 0.75949017 0.7970516  0.7602887  0.78390663\n"," 0.75918305 0.80165848 0.75949017 0.80165848 0.7602887  0.78402948\n"," 0.75918305 0.76108722 0.75918305 0.76280713 0.7602887  0.76207002\n"," 0.75918305 0.51458845 0.75921376 0.51855037 0.7595516  0.77100737\n"," 0.75918305 0.70039926 0.75918305 0.51022727 0.76041155 0.51468059\n"," 0.75918305 0.78762285 0.7597973  0.80199631 0.75924447 0.80709459\n"," 0.75918305 0.8        0.75942875 0.7992629  0.75949017 0.80273342\n"," 0.75918305 0.76314496 0.75942875 0.78120393 0.75945946 0.77162162\n"," 0.50027641 0.78682432 0.75918305 0.79394963 0.76041155 0.79410319\n"," 0.76065725 0.79545455 0.7593059  0.77238943 0.76041155 0.51464988\n"," 0.76065725 0.80279484 0.75921376 0.79253686 0.75942875 0.79785012\n"," 0.76065725 0.80248771 0.75918305 0.79674447 0.75918305 0.78525799\n"," 0.76047297 0.76194717 0.75918305 0.76302211 0.75918305 0.76320639]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Execution time: 12920.441146373749 seconds\n"]}],"source":["start_time = time.time()\n","\n","grid_search_mlp = GridSearchCV(MLPClassifier(random_state=10), params, verbose=1, cv=2)\n","grid_search_mlp.fit(X_train, y_train)\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1746233308821,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"sHN5L-HYzxKU","outputId":"760936af-e31e-4a79-b5ed-274213992967"},"outputs":[{"data":{"text/plain":["{'activation': 'relu',\n"," 'hidden_layer_sizes': (100,),\n"," 'learning_rate_init': 0.005,\n"," 'random_state': 1,\n"," 'solver': 'adam'}"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_mlp.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":784,"status":"ok","timestamp":1746233364266,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"QrELr_2QzyA0","outputId":"9523b2f5-036c-4ac6-b09a-2699a391a94c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.7270437933787851\n","Test accuracy: 0.7270437933787851\n"]}],"source":["y_pred=grid_search_mlp.predict(X_test)\n","mlp_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {mlp_mat.diagonal().sum()/mlp_mat.sum()}')\n","\n","print(f\"Test accuracy: {grid_search_mlp.score(X_test, y_test)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":400,"status":"ok","timestamp":1746233893075,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"R_gaBcrnovqE","outputId":"6bbb899d-a134-41e4-f53d-7e12d904163e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train accuracy: 0.7281941031941032\n"]}],"source":["y_pred_=grid_search_mlp.predict(X_train)\n","mlp_mat_=confusion_matrix(y_train,y_pred_)\n","print(f\"Train accuracy: {mlp_mat_.diagonal().sum()/mlp_mat_.sum()}\")"]},{"cell_type":"markdown","metadata":{"id":"GO-h3dUoQm-Z"},"source":["**2**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"executionInfo":{"elapsed":321,"status":"ok","timestamp":1746464102682,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"NYNPC5-VQkPY","outputId":"54b5d5d9-4543-4d05-ad60-c1513520c6f4"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_apt"},"text/html":["\n","  <div id=\"df-81e8bf0f-a6fa-4208-bb7d-430b85d4978f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>LIMIT_BAL</th>\n","      <th>SEX</th>\n","      <th>EDUCATION</th>\n","      <th>MARRIAGE</th>\n","      <th>AGE</th>\n","      <th>PAY_0</th>\n","      <th>PAY_2</th>\n","      <th>PAY_3</th>\n","      <th>PAY_4</th>\n","      <th>...</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>PAY_AMT1</th>\n","      <th>PAY_AMT2</th>\n","      <th>PAY_AMT3</th>\n","      <th>PAY_AMT4</th>\n","      <th>PAY_AMT5</th>\n","      <th>PAY_AMT6</th>\n","      <th>default payment next month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>20000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>24</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>689</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>120000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>26</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>3272</td>\n","      <td>3455</td>\n","      <td>3261</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>2000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>90000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>14331</td>\n","      <td>14948</td>\n","      <td>15549</td>\n","      <td>1518</td>\n","      <td>1500</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","      <td>5000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>50000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>28314</td>\n","      <td>28959</td>\n","      <td>29547</td>\n","      <td>2000</td>\n","      <td>2019</td>\n","      <td>1200</td>\n","      <td>1100</td>\n","      <td>1069</td>\n","      <td>1000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>50000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>57</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>20940</td>\n","      <td>19146</td>\n","      <td>19131</td>\n","      <td>2000</td>\n","      <td>36681</td>\n","      <td>10000</td>\n","      <td>9000</td>\n","      <td>689</td>\n","      <td>679</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81e8bf0f-a6fa-4208-bb7d-430b85d4978f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-81e8bf0f-a6fa-4208-bb7d-430b85d4978f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-81e8bf0f-a6fa-4208-bb7d-430b85d4978f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-bf3d8e2a-576f-43a2-87c9-08d2e9891fe2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf3d8e2a-576f-43a2-87c9-08d2e9891fe2')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-bf3d8e2a-576f-43a2-87c9-08d2e9891fe2 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["   ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n","0   1      20000    2          2         1   24      2      2     -1     -1   \n","1   2     120000    2          2         2   26     -1      2      0      0   \n","2   3      90000    2          2         2   34      0      0      0      0   \n","3   4      50000    2          2         1   37      0      0      0      0   \n","4   5      50000    1          2         1   57     -1      0     -1      0   \n","\n","   ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  PAY_AMT3  \\\n","0  ...          0          0          0         0       689         0   \n","1  ...       3272       3455       3261         0      1000      1000   \n","2  ...      14331      14948      15549      1518      1500      1000   \n","3  ...      28314      28959      29547      2000      2019      1200   \n","4  ...      20940      19146      19131      2000     36681     10000   \n","\n","   PAY_AMT4  PAY_AMT5  PAY_AMT6  default payment next month  \n","0         0         0         0                           1  \n","1      1000         0      2000                           1  \n","2      1000      1000      5000                           0  \n","3      1100      1069      1000                           0  \n","4      9000       689       679                           0  \n","\n","[5 rows x 25 columns]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["df_apt=pd.read_csv('default of credit card clients.csv',skiprows=1)\n","df_apt.head()"]},{"cell_type":"code","execution_count":108,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"elapsed":1184,"status":"ok","timestamp":1746495748520,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"T0tq75SzjV7o","outputId":"20beb978-8133-469c-bc17-6ea70daf1ae1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Center the features\n","scaler = StandardScaler(with_std=False)\n","apt_scaled = scaler.fit_transform(df_apt.drop('default payment next month', axis=1))  # Drop 'default' if present\n","\n","# Perform PCA\n","pca = PCA()\n","pca_result = pca.fit_transform(apt_scaled)\n","\n","\n","\n","#1st PC Scatterplot\n","pc_apt = pd.DataFrame(pca_result[:, :2], columns=[f'PC{i+1}' for i in range(2)])\n","pc_apt['default'] = df_apt['default payment next month'].values\n","\n","sns.scatterplot(data=pc_apt, x='PC1', y='PC2', hue='default', palette='tab10',alpha=0.2)\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":477,"status":"ok","timestamp":1746333769371,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"MYCR-luwjdQ5","outputId":"296c7475-9918-4722-dceb-c8985990fbb2"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["[np.float64(0.0),\n"," np.float64(0.6094321693476845),\n"," np.float64(0.9042992650437429),\n"," np.float64(0.9347732528779319),\n"," np.float64(0.951674337461275),\n"," np.float64(0.9610802302846498),\n"," np.float64(0.9701108499686958),\n"," np.float64(0.9776437357414753),\n"," np.float64(0.9840196308131638),\n"," np.float64(0.9898471250136734)]"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["# Variance Explained\n","plt.bar(np.arange(1, 11),pca.explained_variance_ratio_[0:10])\n","plt.xlabel('Component')\n","plt.ylabel('Variance Explained')\n","plt.show()\n","\n","#screeplot\n","plt.plot(np.cumsum(pca.explained_variance_ratio_))\n","plt.xlabel('Number of Components')\n","plt.ylabel('Cumulative Explained Variance')\n","plt.title('Scree Plot')\n","plt.show()\n","\n","[np.sum(pca.explained_variance_ratio_[0:i]) for i in range(10)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1746335171350,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"8sQ21ohUr0Br","outputId":"6dc98db3-feac-4661-8bf5-36010964b109"},"outputs":[{"data":{"text/plain":["8"]},"execution_count":30,"metadata":{},"output_type":"execute_result"}],"source":["pcs.shape[1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"elapsed":153,"status":"error","timestamp":1746375041545,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"Ff3-F-Vloau_","outputId":"b10d9f49-9b90-4f9d-cad5-f5c5bb725d72"},"outputs":[{"ename":"NameError","evalue":"name 'pd' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d7776696e5d3>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpcs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpca_result\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpcs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'default'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_apt\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'default payment next month'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpcs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}],"source":["pcs=pd.DataFrame(pca_result[:,:7])\n","pcs['default']=df_apt['default payment next month']\n","_,test=train_test_split(df_apt.drop('default payment next month', axis=1),test_size=0.1,random_state=10)\n","train,val=train_val_test(_,test_size=0.1,random_state=10)\n","X_train=train.iloc[:,:7]\n","y_train=train.iloc[:,pcs.shape[1]-1]\n","X_val=val.iloc[:,:pcs.shape[1]-1]\n","y_val=val.iloc[:,pcs.shape[1]-1]\n","X_test=test.iloc[:,:pcs.shape[1]-1]\n","y_test=test.iloc[:,pcs.shape[1]-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":116,"status":"ok","timestamp":1746335315604,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"Q2_ac-kqrRJ4","outputId":"b242fc95-c10e-477f-a28c-da484a3f00cb"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"X_val\",\n  \"rows\": 2700,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 165698.44975944603,\n        \"min\": -172796.22020248615,\n        \"max\": 1134240.74425313,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -7164.937446055031,\n          -149544.96631686174,\n          -63471.980097345215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114875.73193213392,\n        \"min\": -324410.2279913672,\n        \"max\": 525788.7622802116,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -108092.27451564987,\n          -39163.62383100221,\n          15294.707890821232\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33894.14510823394,\n        \"min\": -267177.26888583484,\n        \"max\": 306108.32835594774,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -14143.949688332654,\n          -2336.582889866314,\n          13200.058819504811\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23263.383918114778,\n        \"min\": -203670.3527847129,\n        \"max\": 366377.97755896935,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -5324.745890017463,\n          -875.3474090896998,\n          3871.0731262417708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18681.596432339684,\n        \"min\": -98452.10377099946,\n        \"max\": 252323.05370282894,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -2497.007445450627,\n          -1981.4630990049866,\n          -1768.965389963256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17730.659681140543,\n        \"min\": -184322.9730265752,\n        \"max\": 218844.6858851716,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          -4374.081324409515,\n          -669.24680418942,\n          -7008.08489952642\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17418.609073896565,\n        \"min\": -229831.76497572882,\n        \"max\": 325287.25275783363,\n        \"num_unique_values\": 2700,\n        \"samples\": [\n          107.82698322202046,\n          -416.8040546747528,\n          2889.110419325808\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"X_val"},"text/html":["\n","  <div id=\"df-245f5444-9112-4c3d-97de-e8ba734526a9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>11835</th>\n","      <td>14140.988498</td>\n","      <td>120316.508047</td>\n","      <td>81403.577342</td>\n","      <td>-34315.554056</td>\n","      <td>33090.087091</td>\n","      <td>-4615.264565</td>\n","      <td>-66372.816407</td>\n","    </tr>\n","    <tr>\n","      <th>13250</th>\n","      <td>-85933.703190</td>\n","      <td>62744.886458</td>\n","      <td>-848.373865</td>\n","      <td>-4322.361166</td>\n","      <td>-2994.828261</td>\n","      <td>-2657.129599</td>\n","      <td>1832.946554</td>\n","    </tr>\n","    <tr>\n","      <th>28419</th>\n","      <td>-105228.015620</td>\n","      <td>-41161.733265</td>\n","      <td>-8455.120458</td>\n","      <td>-1925.890899</td>\n","      <td>-3366.363005</td>\n","      <td>-974.292147</td>\n","      <td>-207.366005</td>\n","    </tr>\n","    <tr>\n","      <th>6467</th>\n","      <td>-68692.913880</td>\n","      <td>76571.982713</td>\n","      <td>-7269.136481</td>\n","      <td>1268.245488</td>\n","      <td>2000.953221</td>\n","      <td>307.520512</td>\n","      <td>6619.767013</td>\n","    </tr>\n","    <tr>\n","      <th>11191</th>\n","      <td>-132003.904908</td>\n","      <td>-82583.800862</td>\n","      <td>-34116.983031</td>\n","      <td>15782.724798</td>\n","      <td>-638.039988</td>\n","      <td>-6051.717326</td>\n","      <td>-7816.967094</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>28237</th>\n","      <td>19510.529914</td>\n","      <td>211922.286299</td>\n","      <td>755.556225</td>\n","      <td>1414.525285</td>\n","      <td>17634.062501</td>\n","      <td>5934.361409</td>\n","      <td>19822.089147</td>\n","    </tr>\n","    <tr>\n","      <th>14060</th>\n","      <td>-66104.989189</td>\n","      <td>108602.400585</td>\n","      <td>1339.540317</td>\n","      <td>-3975.860331</td>\n","      <td>-10133.369275</td>\n","      <td>-3389.636074</td>\n","      <td>-810.498142</td>\n","    </tr>\n","    <tr>\n","      <th>23351</th>\n","      <td>-146239.230778</td>\n","      <td>-52108.145795</td>\n","      <td>-6493.310004</td>\n","      <td>-3273.223136</td>\n","      <td>2212.166179</td>\n","      <td>6395.491455</td>\n","      <td>-4792.425034</td>\n","    </tr>\n","    <tr>\n","      <th>7657</th>\n","      <td>-93636.353348</td>\n","      <td>43920.589271</td>\n","      <td>483.070732</td>\n","      <td>2976.196297</td>\n","      <td>-9522.843819</td>\n","      <td>402.206049</td>\n","      <td>4511.427417</td>\n","    </tr>\n","    <tr>\n","      <th>14097</th>\n","      <td>-140314.223357</td>\n","      <td>-55864.201022</td>\n","      <td>17794.249895</td>\n","      <td>-7184.910685</td>\n","      <td>10350.215026</td>\n","      <td>635.317506</td>\n","      <td>-14295.950784</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2700 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-245f5444-9112-4c3d-97de-e8ba734526a9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-245f5444-9112-4c3d-97de-e8ba734526a9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-245f5444-9112-4c3d-97de-e8ba734526a9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b11c6b34-312b-45f9-ad46-2178dd1be2a0\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b11c6b34-312b-45f9-ad46-2178dd1be2a0')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b11c6b34-312b-45f9-ad46-2178dd1be2a0 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_3a47d9a4-8504-466e-88d1-61b14b233e2e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_val')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3a47d9a4-8504-466e-88d1-61b14b233e2e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_val');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["                   0              1             2             3             4  \\\n","11835   14140.988498  120316.508047  81403.577342 -34315.554056  33090.087091   \n","13250  -85933.703190   62744.886458   -848.373865  -4322.361166  -2994.828261   \n","28419 -105228.015620  -41161.733265  -8455.120458  -1925.890899  -3366.363005   \n","6467   -68692.913880   76571.982713  -7269.136481   1268.245488   2000.953221   \n","11191 -132003.904908  -82583.800862 -34116.983031  15782.724798   -638.039988   \n","...              ...            ...           ...           ...           ...   \n","28237   19510.529914  211922.286299    755.556225   1414.525285  17634.062501   \n","14060  -66104.989189  108602.400585   1339.540317  -3975.860331 -10133.369275   \n","23351 -146239.230778  -52108.145795  -6493.310004  -3273.223136   2212.166179   \n","7657   -93636.353348   43920.589271    483.070732   2976.196297  -9522.843819   \n","14097 -140314.223357  -55864.201022  17794.249895  -7184.910685  10350.215026   \n","\n","                 5             6  \n","11835 -4615.264565 -66372.816407  \n","13250 -2657.129599   1832.946554  \n","28419  -974.292147   -207.366005  \n","6467    307.520512   6619.767013  \n","11191 -6051.717326  -7816.967094  \n","...            ...           ...  \n","28237  5934.361409  19822.089147  \n","14060 -3389.636074   -810.498142  \n","23351  6395.491455  -4792.425034  \n","7657    402.206049   4511.427417  \n","14097   635.317506 -14295.950784  \n","\n","[2700 rows x 7 columns]"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["X_val"]},{"cell_type":"code","execution_count":107,"metadata":{"id":"ZLKFEBxlG8Ho","executionInfo":{"status":"ok","timestamp":1746495729751,"user_tz":240,"elapsed":2,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}}},"outputs":[],"source":["import random\n","#random.choices(range(0,100),k=101)\n","def train_val_test(size,p_val,p_test):\n","  random.seed(10)\n","  indices_train=list(range(0,size))\n","  indices_val=[]\n","  indices_test=[]\n","  for i in range(int(size*p_val)):\n","    i=random.choice(indices_train)\n","    indices_val.append(i)\n","    indices_train.remove(i)\n","  for j in range(int(size*p_test)):\n","    j=random.choice(indices_train)\n","    indices_test.append(j)\n","    indices_train.remove(j)\n","  return indices_train,indices_val,indices_test"]},{"cell_type":"code","source":["#errors=pd.DataFrame(np.zeros((len(no_pc_list)*len(init_list),2)))\n","errors.iloc[0,:]='a',2\n","errors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"zxLScc0CR1As","executionInfo":{"status":"ok","timestamp":1746496314101,"user_tz":240,"elapsed":17,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"8df4c48d-f81f-4565-f927-a4eeaebfb376"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-122-c1fc1fed5057>:2: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value 'a' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n","  errors.iloc[0,:]='a',2\n"]},{"output_type":"execute_result","data":{"text/plain":["      0    1\n","0     a  2.0\n","1   0.0  0.0\n","2   0.0  0.0\n","3   0.0  0.0\n","4   0.0  0.0\n","5   0.0  0.0\n","6   0.0  0.0\n","7   0.0  0.0\n","8   0.0  0.0\n","9   0.0  0.0\n","10  0.0  0.0\n","11  0.0  0.0\n","12  0.0  0.0\n","13  0.0  0.0"],"text/html":["\n","  <div id=\"df-3253475a-7caf-4f3d-94df-02b482617bda\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3253475a-7caf-4f3d-94df-02b482617bda')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3253475a-7caf-4f3d-94df-02b482617bda button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3253475a-7caf-4f3d-94df-02b482617bda');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1a0ed50f-1d74-4b79-8367-d65adcc266e0\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a0ed50f-1d74-4b79-8367-d65adcc266e0')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1a0ed50f-1d74-4b79-8367-d65adcc266e0 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_e684e424-4462-4a71-963f-1a614969ffd0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('errors')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e684e424-4462-4a71-963f-1a614969ffd0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('errors');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"errors","summary":"{\n  \"name\": \"errors\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          \"a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5345224838248486,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":122}]},{"cell_type":"code","execution_count":132,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16114,"status":"ok","timestamp":1746497034369,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"ZwMNU4ZDn-c3","outputId":"ef1e668f-e8de-45e3-c81c-cdac983dbf7c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[4053  678]\n"," [1127  142]]\n","[[4053  678]\n"," [1127  142]]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-132-4eb8daae468f>:23: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2,random,auto' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n","  errors.iloc[index,:]=[f'{n},{i},{n_}',score]\n"]},{"output_type":"stream","name":"stdout","text":["[[4053  678]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4053  678]\n"," [1127  142]]\n","[[4056  675]\n"," [1127  142]]\n","[[4056  675]\n"," [1127  142]]\n","[[ 679 4052]\n"," [ 142 1127]]\n","[[4056  675]\n"," [1127  142]]\n","[[4056  675]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4056  675]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 679 4052]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4056  675]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 679 4052]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 679 4052]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 679 4052]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[ 678 4053]\n"," [ 142 1127]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n","[[4055  676]\n"," [1127  142]]\n"]},{"output_type":"execute_result","data":{"text/plain":["0.6996666666666667"]},"metadata":{},"execution_count":132}],"source":["#train_val_test_split()\n","no_pc_list=[2,3,4,5,6,10,20]\n","init_list=['random','k-means++']\n","n_init_list=['auto',20,50]\n","train_indices,val_indices,test_indices=train_val_test(pca_result.shape[0],0.2,0.2)\n","y_train=pc_apt['default'].iloc[train_indices]\n","y_val=pc_apt['default'].iloc[val_indices]\n","y_test=pc_apt['default'].iloc[test_indices]\n","errors=pd.DataFrame(np.zeros((len(no_pc_list)*len(init_list)*len(n_init_list),2)))\n","index=0\n","for n in no_pc_list:\n","  X_train=pca_result[train_indices,:n]\n","  X_val=pca_result[val_indices,:n]\n","  X_test=pca_result[test_indices,:n]\n","  for i in init_list:\n","    for n_ in n_init_list:\n","      kmeans = KMeans(n_clusters=2, init=i, n_init=n_, max_iter=300, random_state=11)\n","      kmeans.fit(X_train,y_train)\n","      y_pred=kmeans.predict(X_val)\n","      km_matrix=confusion_matrix(y_val,y_pred)\n","      print(km_matrix)\n","      score=max(np.sum(km_matrix.diagonal())/km_matrix.sum(),(km_matrix[0,1]+km_matrix[1,0])/km_matrix.sum())\n","      errors.iloc[index,:]=[f'{n},{i},{n_}',score]\n","      index=index+1\n","np.max(errors.iloc[:,1])"]},{"cell_type":"code","source":["errors.iloc[np.argmax(errors.iloc[:,1]),:]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"VIWDjjhjU_Pq","executionInfo":{"status":"ok","timestamp":1746497046138,"user_tz":240,"elapsed":19,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"888322a8-efac-47f8-f657-33600f19344f"},"execution_count":133,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3,random,20\n","1       0.699667\n","Name: 7, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>7</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3,random,20</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.699667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":133}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1746466175444,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"lEdvzTEmfiaO","outputId":"af109194-18cd-4490-c7fd-a639c83fa6d4"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"X_train[['ID']]\",\n  \"rows\": 18000,\n  \"fields\": [\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8676,\n        \"min\": 1,\n        \"max\": 30000,\n        \"num_unique_values\": 18000,\n        \"samples\": [\n          4305,\n          12395,\n          15315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-2a002697-ba55-4316-bf2e-29f3f9c6cb30\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>29994</th>\n","      <td>29995</td>\n","    </tr>\n","    <tr>\n","      <th>29995</th>\n","      <td>29996</td>\n","    </tr>\n","    <tr>\n","      <th>29997</th>\n","      <td>29998</td>\n","    </tr>\n","    <tr>\n","      <th>29998</th>\n","      <td>29999</td>\n","    </tr>\n","    <tr>\n","      <th>29999</th>\n","      <td>30000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>18000 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a002697-ba55-4316-bf2e-29f3f9c6cb30')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2a002697-ba55-4316-bf2e-29f3f9c6cb30 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2a002697-ba55-4316-bf2e-29f3f9c6cb30');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-71fadf42-62d8-4b44-87db-3b0e8da58fb1\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71fadf42-62d8-4b44-87db-3b0e8da58fb1')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-71fadf42-62d8-4b44-87db-3b0e8da58fb1 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["          ID\n","0          1\n","2          3\n","3          4\n","4          5\n","5          6\n","...      ...\n","29994  29995\n","29995  29996\n","29997  29998\n","29998  29999\n","29999  30000\n","\n","[18000 rows x 1 columns]"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["X_train[['ID']]"]},{"cell_type":"code","execution_count":149,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3609,"status":"ok","timestamp":1746499192313,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"oanIYZcnVaiL","outputId":"372358e0-39f8-4408-d095-f2f6451e5e62"},"outputs":[{"output_type":"stream","name":"stdout","text":["['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\n","(18000, 17)\n","(6000, 17)\n"]}],"source":["import scipy.stats as stats\n","\n","train_i,val_i,test_i=train_val_test(df_apt.shape[0],0.2,0.2)\n","\n","X_train=df_apt.loc[train_i,:].drop('default payment next month', axis=1)\n","y_train=df_apt.loc[train_i,'default payment next month']\n","X_val=df_apt.loc[val_i,:].drop('default payment next month', axis=1)\n","y_val=df_apt.loc[val_i,'default payment next month']\n","X_test=df_apt.loc[test_i,:].drop('default payment next month', axis=1)\n","y_test=df_apt.loc[test_i,'default payment next month']\n","\n","#filter out of features having low correlation with pred variable\n","features_kept=[]\n","for f in df_apt.columns[:len(df_apt.columns)-1]:\n","  if abs(stats.pearsonr(X_train[f],y_train).statistic)>0.025:\n","    features_kept.append(f)\n","print(features_kept)\n","\n","X_train=X_train[features_kept]\n","X_val=X_val[features_kept]\n","X_test=X_test[features_kept]\n","\n","print(X_train.shape)\n","print(X_val.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"cNI5d7dTcZWQ","outputId":"f3f358ed-3534-4343-c9bf-31024cb48429"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 2 folds for each of 324 candidates, totalling 648 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n","216 fits failed out of a total of 648.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","216 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1382, in wrapper\n","    estimator._validate_params()\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 436, in _validate_params\n","    validate_parameter_constraints(\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\", line 98, in validate_parameter_constraints\n","    raise InvalidParameterError(\n","sklearn.utils._param_validation.InvalidParameterError: The 'criterion' parameter of RandomForestClassifier must be a str among {'entropy', 'gini', 'log_loss'}. Got 'log-loss' instead.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [0.81572222 0.81738889 0.81811111 0.81561111 0.81738889 0.81816667\n"," 0.81566667 0.81688889 0.81744444 0.81133333 0.81727778 0.81822222\n"," 0.81044444 0.81705556 0.81827778 0.81005556 0.81716667 0.81827778\n"," 0.81727778 0.81788889 0.81733333 0.817      0.81783333 0.81733333\n"," 0.81722222 0.81694444 0.81727778 0.80938889 0.81588889 0.81583333\n"," 0.81155556 0.81705556 0.81644444 0.81166667 0.81616667 0.8165\n"," 0.81116667 0.81633333 0.81688889 0.81033333 0.81605556 0.81722222\n"," 0.80861111 0.81611111 0.817      0.81066667 0.81611111 0.81677778\n"," 0.80922222 0.81716667 0.81683333 0.81288889 0.81577778 0.817\n"," 0.79522222 0.81127778 0.81127778 0.79927778 0.81072222 0.81327778\n"," 0.80888889 0.81433333 0.81494444 0.79711111 0.81161111 0.81188889\n"," 0.80361111 0.81344444 0.81438889 0.80866667 0.81527778 0.81577778\n"," 0.79572222 0.80866667 0.81061111 0.801      0.81166667 0.81316667\n"," 0.80905556 0.81388889 0.81433333 0.79861111 0.80816667 0.8095\n"," 0.79944444 0.81205556 0.81272222 0.80761111 0.81511111 0.81505556\n"," 0.79572222 0.80938889 0.80955556 0.80316667 0.8135     0.81483333\n"," 0.80983333 0.81533333 0.81594444 0.79711111 0.80816667 0.80866667\n"," 0.79822222 0.80988889 0.81211111 0.80872222 0.81383333 0.8145\n"," 0.81766667 0.81794444 0.81788889 0.81755556 0.81783333 0.81783333\n"," 0.8165     0.81744444 0.8175     0.809      0.81683333 0.81783333\n"," 0.8085     0.81638889 0.81777778 0.80777778 0.81616667 0.81766667\n"," 0.81766667 0.81755556 0.81744444 0.81755556 0.81766667 0.81738889\n"," 0.81711111 0.81711111 0.81727778 0.81061111 0.81583333 0.81644444\n"," 0.81055556 0.817      0.81666667 0.81183333 0.81638889 0.81622222\n"," 0.81194444 0.81738889 0.81844444 0.8095     0.81683333 0.81772222\n"," 0.81144444 0.81716667 0.81738889 0.81044444 0.8165     0.81711111\n"," 0.81222222 0.817      0.817      0.81066667 0.81683333 0.8175\n"," 0.79822222 0.8125     0.81216667 0.79894444 0.81383333 0.81433333\n"," 0.80666667 0.81394444 0.81483333 0.8        0.812      0.81272222\n"," 0.80483333 0.81294444 0.81516667 0.80905556 0.81555556 0.816\n"," 0.79927778 0.81172222 0.8115     0.80266667 0.81272222 0.8135\n"," 0.80733333 0.81444444 0.81566667 0.79716667 0.80833333 0.81038889\n"," 0.799      0.81133333 0.81233333 0.80816667 0.81472222 0.81488889\n"," 0.7975     0.80944444 0.81155556 0.80138889 0.81205556 0.81527778\n"," 0.80644444 0.81572222 0.81577778 0.80038889 0.80738889 0.80944444\n"," 0.80094444 0.80977778 0.8115     0.80666667 0.81438889 0.8155\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan]\n","  warnings.warn(\n"]},{"data":{"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=RandomForestClassifier(random_state=10),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log-loss&#x27;],\n","                         &#x27;max_depth&#x27;: [5, 10, 20, None],\n","                         &#x27;max_features&#x27;: [10, &#x27;log2&#x27;, None],\n","                         &#x27;min_samples_leaf&#x27;: [1, 2, 5],\n","                         &#x27;n_estimators&#x27;: [10, 100, 1000]},\n","             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=2, estimator=RandomForestClassifier(random_state=10),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log-loss&#x27;],\n","                         &#x27;max_depth&#x27;: [5, 10, 20, None],\n","                         &#x27;max_features&#x27;: [10, &#x27;log2&#x27;, None],\n","                         &#x27;min_samples_leaf&#x27;: [1, 2, 5],\n","                         &#x27;n_estimators&#x27;: [10, 100, 1000]},\n","             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, max_features=&#x27;log2&#x27;,\n","                       n_estimators=1000, random_state=10)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, max_features=&#x27;log2&#x27;,\n","                       n_estimators=1000, random_state=10)</pre></div> </div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=2, estimator=RandomForestClassifier(random_state=10),\n","             param_grid={'criterion': ['gini', 'entropy', 'log-loss'],\n","                         'max_depth': [5, 10, 20, None],\n","                         'max_features': [10, 'log2', None],\n","                         'min_samples_leaf': [1, 2, 5],\n","                         'n_estimators': [10, 100, 1000]},\n","             verbose=1)"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["params = {'n_estimators':[10,100,1000],\n","'criterion':['gini','entropy','log-loss'],\n","'max_depth':[5,10,20,None],\n","'min_samples_leaf':[1,2,5],\n","'max_features':[10,'log2',None]}\n","grid_search_cv = GridSearchCV(RandomForestClassifier(random_state=10), params, verbose=1, cv=2)\n","grid_search_cv.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1746476418173,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"XxEkuJ-Sivza","outputId":"83b5e183-8965-41e5-d7d4-3540fc21c79a"},"outputs":[{"data":{"text/plain":["{'criterion': 'entropy',\n"," 'max_depth': 10,\n"," 'max_features': 'log2',\n"," 'min_samples_leaf': 1,\n"," 'n_estimators': 1000}"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2585,"status":"ok","timestamp":1746476392631,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"hqP593bJivgb","outputId":"9a3f6a4d-1f70-4019-ffb4-f91ed2e45f74"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.8241666666666667\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","gb_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {gb_mat.diagonal().sum()/gb_mat.sum()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1743363,"status":"error","timestamp":1746478220730,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"tfRdhoEPSU42","outputId":"8ceca7cd-3f6e-4a55-be34-bd82e322d1f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["(50,) logistic sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.001 2\n"]},{"name":"stderr","output_type":"stream","text":["<ipython-input-46-5699ba873094>:20: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '(50,),logistic,sgd,0.001,1' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n","  errors.iloc[i,:]=[f'{h},{a},{s},{l},{r}',mlp.score(X_test, y_test)]\n"]},{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.001 1\n","Test accuracy: 0.7805\n","\n","(50,) logistic adam 0.001 2\n","Test accuracy: 0.7805\n","\n","(50,) logistic adam 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) logistic adam 0.01 3\n","Test accuracy: 0.7805\n","\n","(50,) relu sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(50,) relu adam 0.001 1\n","Test accuracy: 0.7878333333333334\n","\n","(50,) relu adam 0.001 2\n","Test accuracy: 0.3025\n","\n","(50,) relu adam 0.001 3\n","Test accuracy: 0.5496666666666666\n","\n","(50,) relu adam 0.005 1\n","Test accuracy: 0.4821666666666667\n","\n","(50,) relu adam 0.005 2\n","Test accuracy: 0.7156666666666667\n","\n","(50,) relu adam 0.005 3\n","Test accuracy: 0.792\n","\n","(50,) relu adam 0.01 1\n","Test accuracy: 0.7808333333333334\n","\n","(50,) relu adam 0.01 2\n","Test accuracy: 0.7796666666666666\n","\n","(50,) relu adam 0.01 3\n","Test accuracy: 0.7821666666666667\n","\n","(100,) logistic sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic adam 0.001 1\n","Test accuracy: 0.7803333333333333\n","\n","(100,) logistic adam 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic adam 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) logistic adam 0.005 1\n","Test accuracy: 0.7796666666666666\n","\n","(100,) logistic adam 0.005 2\n","Test accuracy: 0.7801666666666667\n","\n","(100,) logistic adam 0.005 3\n","Test accuracy: 0.7808333333333334\n","\n","(100,) logistic adam 0.01 1\n","Test accuracy: 0.7801666666666667\n","\n","(100,) logistic adam 0.01 2\n","Test accuracy: 0.7803333333333333\n","\n","(100,) logistic adam 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu sgd 0.001 2\n","Test accuracy: 0.7801666666666667\n","\n","(100,) relu sgd 0.001 3\n","Test accuracy: 0.7803333333333333\n","\n","(100,) relu sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu sgd 0.005 2\n","Test accuracy: 0.7808333333333334\n","\n","(100,) relu sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu sgd 0.01 2\n","Test accuracy: 0.7808333333333334\n","\n","(100,) relu sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu adam 0.001 1\n","Test accuracy: 0.785\n","\n","(100,) relu adam 0.001 2\n","Test accuracy: 0.782\n","\n","(100,) relu adam 0.001 3\n","Test accuracy: 0.7135\n","\n","(100,) relu adam 0.005 1\n","Test accuracy: 0.7856666666666666\n","\n","(100,) relu adam 0.005 2\n","Test accuracy: 0.7793333333333333\n","\n","(100,) relu adam 0.005 3\n","Test accuracy: 0.7811666666666667\n","\n","(100,) relu adam 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100,) relu adam 0.01 2\n","Test accuracy: 0.7803333333333333\n","\n","(100,) relu adam 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.001 1\n","Test accuracy: 0.7805\n","\n","(50, 50) logistic adam 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.01 1\n","Test accuracy: 0.7803333333333333\n","\n","(50, 50) logistic adam 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) logistic adam 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) relu sgd 0.001 1\n","Test accuracy: 0.7808333333333334\n","\n","(50, 50) relu sgd 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) relu sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) relu sgd 0.005 1\n","Test accuracy: 0.7808333333333334\n","\n","(50, 50) relu sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) relu sgd 0.005 3\n","Test accuracy: 0.778\n","\n","(50, 50) relu sgd 0.01 1\n","Test accuracy: 0.7808333333333334\n","\n","(50, 50) relu sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(50, 50) relu sgd 0.01 3\n","Test accuracy: 0.778\n","\n","(50, 50) relu adam 0.001 1\n","Test accuracy: 0.48966666666666664\n","\n","(50, 50) relu adam 0.001 2\n","Test accuracy: 0.5651666666666667\n","\n","(50, 50) relu adam 0.001 3\n","Test accuracy: 0.7755\n","\n","(50, 50) relu adam 0.005 1\n","Test accuracy: 0.7805\n","\n","(50, 50) relu adam 0.005 2\n","Test accuracy: 0.7803333333333333\n","\n","(50, 50) relu adam 0.005 3\n","Test accuracy: 0.7745\n","\n","(50, 50) relu adam 0.01 1\n","Test accuracy: 0.7808333333333334\n","\n","(50, 50) relu adam 0.01 2\n","Test accuracy: 0.7803333333333333\n","\n","(50, 50) relu adam 0.01 3\n","Test accuracy: 0.78\n","\n","(100, 100) logistic sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.005 2\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic sgd 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic adam 0.001 1\n","Test accuracy: 0.7796666666666666\n","\n","(100, 100) logistic adam 0.001 2\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic adam 0.001 3\n","Test accuracy: 0.7803333333333333\n","\n","(100, 100) logistic adam 0.005 1\n","Test accuracy: 0.7803333333333333\n","\n","(100, 100) logistic adam 0.005 2\n","Test accuracy: 0.7803333333333333\n","\n","(100, 100) logistic adam 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic adam 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic adam 0.01 2\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) logistic adam 0.01 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.001 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.001 2\n","Test accuracy: 0.7805\n","\n","(100, 100) relu sgd 0.001 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.005 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.005 2\n","Test accuracy: 0.7801666666666667\n","\n","(100, 100) relu sgd 0.005 3\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.01 1\n","Test accuracy: 0.7806666666666666\n","\n","(100, 100) relu sgd 0.01 2\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:336: RuntimeWarning: invalid value encountered in scalar multiply\n","  loss += (0.5 * self.alpha) * values / n_samples\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: overflow encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:203: RuntimeWarning: invalid value encountered in matmul\n","  ret = a @ b\n","/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (5000) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n"]},{"ename":"ValueError","evalue":"Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-5699ba873094>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m                       \u001b[0mlearning_rate_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'constant'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m                       alpha=0, tol=0, solver=s, random_state=r)\n\u001b[0;32m---> 17\u001b[0;31m           \u001b[0mmlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m           \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test accuracy: {mlp.score(X_test, y_test)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m           \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    752\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0ma\u001b[0m \u001b[0mtrained\u001b[0m \u001b[0mMLP\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    753\u001b[0m         \"\"\"\n\u001b[0;32m--> 754\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mincremental\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_solver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, incremental)\u001b[0m\n\u001b[1;32m    494\u001b[0m         \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefs_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintercepts_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mw\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    497\u001b[0m                 \u001b[0;34m\"Solver produced non-finite parameter weights. The input data may\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m                 \u001b[0;34m\" contain large values and need to be preprocessed.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed."]}],"source":["hidden_layer_sizes=[(50,),(100,),(50,50),(100,100)]\n","activation=['logistic','relu']\n","solver=['sgd','adam']\n","learning_rate_init=[0.001,0.005,0.01]\n","random_state=range(1,4)\n","errors=pd.DataFrame(np.zeros((len(hidden_layer_sizes)*len(activation)*len(solver)*len(learning_rate_init)*len(random_state),2)))\n","i=0\n","for h in hidden_layer_sizes:\n","  for a in activation:\n","    for s in solver:\n","      for l in learning_rate_init:\n","        for r in random_state:\n","          print(h,a,s,l,r)\n","          mlp = MLPClassifier(hidden_layer_sizes=h, max_iter=5000, activation=a,\n","                      learning_rate_init=l, learning_rate='constant',\n","                      alpha=0, tol=0, solver=s, random_state=r)\n","          mlp.fit(X_train, y_train)\n","          print(f\"Test accuracy: {mlp.score(X_test, y_test)}\")\n","          print('')\n","          errors.iloc[i,:]=[f'{h},{a},{s},{l},{r}',mlp.score(X_test, y_test)]\n","          i=i+1\n","np.max(errors.iloc[:,1])"]},{"cell_type":"code","execution_count":134,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1746497264038,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"RtXambFcN55f","outputId":"11904429-4fb3-4a2e-f977-419ae6d2c563"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6996666666666667"]},"metadata":{},"execution_count":134}],"source":["np.max(errors.iloc[:,1])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1746478285475,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"BGdysJJAG1M-","outputId":"87b54666-7c65-41dd-fc52-1d0ce37e65bd"},"outputs":[{"data":{"text/plain":["{'criterion': 'entropy',\n"," 'max_depth': 10,\n"," 'max_features': 'log2',\n"," 'min_samples_leaf': 1,\n"," 'n_estimators': 1000}"]},"execution_count":48,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_cv.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":635,"status":"ok","timestamp":1746478290721,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"},"user_tz":240},"id":"UGrQZdvPG070","outputId":"825e933f-f67c-4cb0-d126-bc29922d5283"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 0.8241666666666667\n"]}],"source":["y_pred=grid_search_cv.predict(X_test)\n","mlp_mat=confusion_matrix(y_test,y_pred)\n","print(f'Test accuracy: {mlp_mat.diagonal().sum()/mlp_mat.sum()}')"]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZL3XJzhjdUok","executionInfo":{"status":"ok","timestamp":1746499101644,"user_tz":240,"elapsed":12,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"d37a806c-746f-4d48-d4f0-4f8b56674c2b"},"execution_count":147,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(18000, 20)"]},"metadata":{},"execution_count":147}]},{"cell_type":"code","source":["rf_final = RandomForestClassifier(n_estimators=1000, max_depth=10, max_features='log2', min_samples_leaf=1, criterion='entropy')\n","rf_final.fit(X_train,y_train)\n","y_pred_=rf_final.predict(X_val)\n","rf_final.score(X_val,y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V3FDWD91Xcps","executionInfo":{"status":"ok","timestamp":1746500044936,"user_tz":240,"elapsed":38597,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"6b1d614e-aca2-4954-8e70-ba04cd26e14c"},"execution_count":169,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8253333333333334"]},"metadata":{},"execution_count":169}]},{"cell_type":"code","source":["# Center the features\n","scaler = StandardScaler(with_std=False)\n","apt_scaled_final = scaler.fit_transform(X_val)  # Drop 'default' if present\n","\n","# Perform PCA\n","pca = PCA()\n","pca_result_final = pca.fit_transform(apt_scaled_final)\n","\n","\n","\n","#predicted values\n","pc_apt = pd.DataFrame(pca_result_final[:, :2], columns=[f'PC{i+1}' for i in range(2)])\n","pc_apt['default'] = y_pred_\n","sns.scatterplot(data=pc_apt, x='PC1', y='PC2', hue='default', palette='tab10',alpha=0.2)\n","plt.xlim(-0.2*10**6,1.0*10**6)\n","plt.ylim(-0.2*10**6,0.6*10**6)\n","plt.show()\n","\n","#correct values\n","pc_apt = pd.DataFrame(pca_result_final[:, :2], columns=[f'PC{i+1}' for i in range(2)])\n","pc_apt['default'] = [float(i) for i in y_val]\n","plt.xlim(-0.2*10**6,1.0*10**6)\n","plt.ylim(-0.2*10**6,0.6*10**6)\n","sns.scatterplot(data=pc_apt, x='PC1', y='PC2', hue='default', palette='tab10',alpha=0.2)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":893},"id":"LW5sP9wmdRWb","executionInfo":{"status":"ok","timestamp":1746501022923,"user_tz":240,"elapsed":742,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"cbc5c950-35b1-4fbd-92bc-d49320041167"},"execution_count":190,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["[float(i) for i in y_val]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oIIpRS7bjUx-","executionInfo":{"status":"ok","timestamp":1746500980667,"user_tz":240,"elapsed":5,"user":{"displayName":"Daniel Shi","userId":"00818829194215272411"}},"outputId":"193aafec-6fb6-43aa-81dd-a987be3ec8e9"},"execution_count":188,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," ...]"]},"metadata":{},"execution_count":188}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO/Ax585X1/OUM1hEFQ0QH9"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}